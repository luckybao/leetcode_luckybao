Regular Expression Matching Total Accepted: 14085 Total Submissions: 70752 My Submissions
Implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "a*") → true
isMatch("aa", ".*") → true
isMatch("ab", ".*") → true
isMatch("aab", "c*a*b") → true

//LOGIC!!!
public class Solution {//for string manipulation, "substring" will need to copy all 
//  did not understand the problem at first, here is an explanation: becareful "matches zero or more of THE preceding ELEMENT, ", not preceding elementS!!! isMatch("aab",""c*a*b")
//The pattern :  "c*a*b" means,  there can be 0 or more 'c', 0 or more 'a' and one b.
//cannot be O(n) from backward since if we have .*, since "." can match any single character, we need to check recursively
//Overall, there are 2 different cases: 1) the second char of pattern is "*" , and 2) the second char of pattern is not "*".
// For the 1st case, if the first char of pattern is not ".", the first char of pattern and string should be the same. Then continue to match the left part.
// For the 2nd case, if the first char of pattern is "." or first char of pattern == the first i char of string, continue to match the left.
    public boolean isMatch(String s, String p) {//try my own
    if(p.length()==0)return (s.length()==0);
    //if(s.length()==0)return (p.length()==0||p.charAt(1)=='*');
    return helper(s,0,p,0);
 }
 public boolean helper(String s, int i, String p,int j){
    if(j>=p.length())return (i>=s.length());
    if(j==p.length()-1||p.charAt(j+1)!='*'){
         if(i>=s.length()||(i<s.length()&&s.charAt(i)!=p.charAt(j)&&p.charAt(j)!='.'))return false;
         return(helper(s,i+1,p,j+1));
        
     }
     else {while(i<s.length()&&(s.charAt(i)==p.charAt(j)||p.charAt(j)=='.')){
         if(helper(s,i,p,j+2))return true;
         i++;}
 return helper(s,i,p,j+2);}
 }
}

//DP:
这里的function比较复杂，也需要分情况讨论，dp[i][j]肯定是由之前的状态得来
p[j-1] != "." and p[j-1] != "*"
之前一个不是特殊字符，那么只需要check当前这一位就可以了。
if dp[i-1][j-1] and s[i-1] == p[j-1]:
    dp[i][j] = True
p[j-1] == "."
当前这一位可以match任何字符，并且必须match一位，那么dp[i][j] = dp[i-1][j-1]
p[j-1] == "*"
这时候又有了很多种情况，p[j-2]可以match zero or more characters, 而match次数>=2的时候可以再退回到0或1的情况
if dp[i][j-2] == True, 说明match 0的情况可以成功，就可以将dp[i][j]设为True
if dp[i][j-1] == True, 说明match 1的情况可以成功
match 2次以上的情况，可以退回到dp[i-1][j]， 最终可以退到0次或1次
if dp[i-1][j] and (s[i-1] == p[j-2] or p[j-2] == "."): dp[i][j] = True
这个能想到很重要，否则match 2次以上很难处理。可以试着找找前后的关系找灵感
注意点

dp[i][j]代表的是前i个，前j个字符，而不是Index, 在初始化dp的时候要比长度多一位
class Solution:
    def isMatch(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: bool
        """
        dp = [[False for j in range(len(p)+1)] for i in range(len(s)+1)]
        dp[0][0] = True
        for j in range(2, len(p)+1):
            if p[j-1] == '*':
                dp[0][j] = dp[0][j-2]
        for i in range(1, len(s)+1):
            for j in range(1, len(p)+1):
                if p[j-1] != '*':
                    dp[i][j] = dp[i-1][j-1] and (s[i-1] == p [j-1] or p[j-1] == '.')
                else:
                    dp[i][j] = dp[i][j-1] or dp[i][j-2] or (dp[i-1][j] and (s[i-1] == p[j-2] or p[j-2] == '.') )
        return dp[len(s)][len(p)]
                    
