Binary Tree Preorder Traversal Total Accepted: 19852 Total Submissions: 56807 My Submissions
Given a binary tree, return the preorder traversal of its nodes' values.

For example:
Given binary tree {1,#,2,3},
   1
    \
     2
    /
   3
return [1,2,3].
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 //RECURSIVE!!!
public class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> result=new ArrayList<Integer>();//List initialization!!! MUST use helper class since result will be flushed out every time when you call the preorderTraversal function!
        if(root==null) return result;
        helper(root,result);
       return result;
    }
    public void helper(TreeNode root, List<Integer> result){//helper type!!!
       if(root==null) return;
        result.add(root.val);
        helper(root.left,result);
        helper(root.right,result); 
        return;
    }
}

//ITERATIVE!!!
public class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> result=new ArrayList<Integer>();//List initialization!!! MUST use helper class since result will be flushed out every time when you call the preorderTraversal function!
        if(root==null) return result;
        else {
            Stack<TreeNode> helper=new Stack<TreeNode>();
            TreeNode top;
        helper.push(root);
        while(!helper.isEmpty()){
            top=helper.pop();
            result.add(top.val);
            if(top.right!=null){
                helper.push(top.right);
            }
            if(top.left!=null){
                helper.push(top.left);
            }
        }
        }
        return result;
    }
}
