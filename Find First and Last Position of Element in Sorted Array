Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Python 3 solution 1:
class Solution:
    def findfirst(self, nums, target):
        if len(nums) == 0: return -1
        l = 0
        r = len(nums)-1
        res = -1
        while l <= r :
            mid = (l + r) //2
            if target == nums[mid]:
                res = mid
                r = mid -1
            elif target < nums[mid] : 
                r = mid-1
            else: l = mid + 1
        return res
    
    def findlast(self, nums, target):
        if len(nums) == 0: return -1
        l = 0
        r = len(nums)-1
        res = -1
        while l <= r :
            mid = (l + r) //2
            if target == nums[mid]:
                res = mid
                l = mid +1
            elif target < nums[mid] : 
                r = mid-1
            else: l = mid + 1
        return res
    
    def searchRange(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        if len(nums) == 0: return [-1, -1]
        l = self.findfirst(nums, target)
        r = self.findlast(nums, target)
        return [l, r]
