Sum Root to Leaf Numbers Total Accepted: 19378 Total Submissions: 65120 My Submissions
Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.

An example is the root-to-leaf path 1->2->3 which represents the number 123.

Find the total sum of all root-to-leaf numbers.

For example,

    1
   / \
  2   3
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.

Return the sum = 12 + 13 = 25.

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int sumNumbers(TreeNode root) {
        if(root==null)return 0;
        return sumhelper(root,root.val);
    }
    public int sumhelper(TreeNode node, int presum){
        if(node==null||(node.left==null&&node.right==null))return presum;
        if(node.left==null) return sumhelper(node.right,presum*10+node.right.val);
        if(node.right==null) return sumhelper(node.left,presum*10+node.left.val);
        return sumhelper(node.left,presum*10+node.left.val)+sumhelper(node.right,presum*10+node.right.val);
    }
}
//iterative
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int sumNumbers(TreeNode root) {
        if(root==null)return 0;
        Stack<TreeNode> stack=new Stack<TreeNode>();
        Stack<Integer> intstack=new Stack<>();
        stack.push(root);
        intstack.push(root.val);
        int sum=0;
        while(!stack.isEmpty()){
          TreeNode top=stack.pop();
          int intop=intstack.pop();
          if(top.left==null&&top.right==null){sum+=intop;continue;}//leaf
          if(top.right!=null){
              stack.push(top.right);
              intstack.push(10*intop+top.right.val);
          }
               if(top.left!=null){
              stack.push(top.left);
              intstack.push(10*intop+top.left.val);
          }
            }
return sum;}
}
