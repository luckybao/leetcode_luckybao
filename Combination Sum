Combination Sum Total Accepted: 16139 Total Submissions: 60970 My Submissions
Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

Note:
All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The solution set must not contain duplicate combinations.
For example, given candidate set 2,3,6,7 and target 7, 
A solution set is: 
[7] 
[2, 2, 3] 

//backtracking
public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {//another solution, using remove in recursion
        List<List<Integer>> results=new ArrayList<List<Integer>>();
        List<Integer> path=new ArrayList<Integer>();
      Arrays.sort(candidates);  
   addUp(candidates, 0, target, path, results);  
   return results;  
 }  
   
 private void addUp(int[] candidates, int start, int target, List<Integer> path,  
     List<List<Integer>> results) {  
   if (start < 0 || target < 0) return;  
   
   if (0 == target) {  
     List<Integer> res = new ArrayList<Integer>(path);  
     results.add(res);  
   } else {  
     for (int i=start; i<candidates.length && candidates[i] <= target; ++i) {  
       // if (candidates[i] > target) continue; // if we don't sort the data at the beginning, we skip large numbers here  
       while(i>0&&candidates[i]==candidates[i-1])++i;//optimization, not necessary
       path.add(candidates[i]);  
       addUp(candidates, i, target - candidates[i], path, results);  
       path.remove(path.size() - 1);  
     }  
   }  
 }  

}

Python 3:

class Solution:
    def DFS(self, candidates, target, start, result):
        if len(candidates) == 0 : return result
        if target < 0: return result
        if target == 0: return Solution.res.append(result)
        for i in range(start, len(candidates)):
            if candidates[i] > target: return result
            self.DFS(candidates, target - candidates[i], i, result+[candidates[i]])
    
    def combinationSum(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        candidates.sort()
        Solution.res = [] #Global Variable
        self.DFS(candidates, target, 0, [])
        return Solution.res
