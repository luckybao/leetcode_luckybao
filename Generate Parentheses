Generate Parentheses Total Accepted: 16054 Total Submissions: 51345 My Submissions
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

"((()))", "(()())", "(())()", "()(())", "()()()"

//solution one, using string
public class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> result=new ArrayList<String>();
        return generateParenthesis(0, 0, "",n,result);
	}
	public List<String> generateParenthesis(int left, int right, String s,int n,List<String> result) {
		if (left > n || right > n || left < right) 	return result;
		if (left == n && right == n) {
			result.add(s);
			return result;
		}
		generateParenthesis(left + 1, right,  s + "(",n,result);
			generateParenthesis(left, right + 1,  s + ")",n,result);
return result;}
}
//another solution since StringBuilder is faster than String, the logic is still recursion
public class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> result=new ArrayList<String>();
        generateParenthesis(0, 0, new StringBuilder(),n,result);
		return result;
	}
	public List<String> generateParenthesis(int left, int right, StringBuilder s,int n,List<String> result) {
		if (left > n || right > n || left < right) 	return result;
		if (left == n && right == n) {
			result.add(s.toString());
			return result;
		}
		StringBuilder l=new StringBuilder(s);
		l.append('(');
		generateParenthesis(left + 1, right,  l,n,result);
		StringBuilder r=new StringBuilder(s);
		r.append(')');
			generateParenthesis(left, right + 1,  r,n,result);
return result;}
}

//iterative from web, clever
public class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> al=new ArrayList<String>();
        Queue<Element> q=new LinkedList<Element>();
        q.add(new Element("",0,0));
        while(!q.isEmpty()){
            Element e=q.poll();
            if(e.left==n && e.right==n){
                al.add(e.str);
            }
            else{
                if(e.left<n)
                    q.add(new Element(e.str+"(", e.left+1,e.right));
                
                if(e.left>e.right)
                    q.add(new Element(e.str+")",e.left,e.right+1));
            }
        }
        
        return al;}
        class Element{
    String str;
    int left;
    int right;
    
    public Element(String s, int l, int r){
        str=s;
        left=l;
        right=r;
    }
}
}

Python 3:
class Solution:            
    def DFS(self, temp, l, r):
        if l > r : return Solution.res
        if l == 0 and r == 0 : Solution.res.append(temp)
        if l > 0 :
            self.DFS(temp + '(', l-1, r)            
        if r > 0:
            self.DFS(temp + ')', l, r-1)

    def generateParenthesis(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        Solution.res = []
        self.DFS("", n, n)
        return Solution.res
