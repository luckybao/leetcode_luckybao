Add Two Numbers Total Accepted: 19614 Total Submissions: 85501 My Submissions
You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
//Solution 1
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode res = null;
         ListNode temp= null;
         ListNode pre= null;
        int sum = 0; int add = 0;
        while(l1!=null || l2!= null){
            sum = add + (l1 != null ? l1.val : 0)
                    + (l2 != null ? l2.val : 0);
            add = sum/10;
            temp = new ListNode(sum%10);
            if(res == null){
                res = temp;
                pre = res;
            }else{
                pre.next = temp;
                pre = temp;
            }
                
                if(l1 != null){l1 = l1.next;}
            if(l2 != null){l2 = l2.next;}
            
            }  
        if(add == 1)pre.next = new ListNode(add); //remember the last add!!!
        
         return res;}
   }


//Solution two:


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1==null)return l2;
        if(l2==null)return l1;
        ListNode dummy=new ListNode(0);
        ListNode pre=dummy;
        int carry=0,n;
        while(l1!=null&&l2!=null){
            n=carry+l1.val+l2.val;
            ListNode node=new ListNode(n%10);
            carry=n/10;
            pre.next=node;pre=pre.next;//remember pre need to move forward, pre=pre.next!
            l1=l1.next;l2=l2.next;
        }
        if(l1==null){
            while(l2!=null){
                n=carry+l2.val;
                ListNode node=new ListNode(n%10);
            carry=n/10;
            pre.next=node;pre=pre.next;
            l2=l2.next;
            }
        }
        if(l2==null){
            while(l1!=null){
                n=carry+l1.val;
                ListNode node=new ListNode(n%10);
            carry=n/10;
            pre.next=node;pre=pre.next;
            l1=l1.next;
            }
        }
        if(carry!=0)//remember the last carry!!!
        {ListNode node=new ListNode(carry);
        pre.next=node;}
    return dummy.next;}
}


Python:
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        if l1 == None: return l2
        if l2 == None: return l1
        flag = 0
        dummy = ListNode(0) 
        p = dummy
        while l1 and l2:
            p.next = ListNode((l1.val + l2.val + flag) % 10)
            flag = (l1.val + l2.val + flag) // 10
            l1 = l1.next
            l2 = l2.next
            p = p.next
        if l1:
            while l1:
                p.next = ListNode((l1.val + flag) % 10)
                flag = (l1.val + flag) // 10
                l1 = l1.next
                p = p.next  
        if l2:
            while l2:
                p.next = ListNode((l2.val + flag) % 10)
                flag = (l2.val + flag) // 10
                l2 = l2.next
                p = p.next                 
        if flag == 1: p.next = ListNode(1)
        return dummy.next
