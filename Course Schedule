Course Schedule Total Accepted: 8152 Total Submissions: 37443 My Submissions Question Solution 
There are a total of n courses you have to take, labeled from 0 to n - 1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

For example:

2, [[1,0]]
There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible.

2, [[1,0],[0,1]]
There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.

Note:
The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.

click to show more hints.

Hints:
This problem is equivalent to finding if a cycle exists in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses.
Topological Sort via DFS - A great video tutorial (21 minutes) on Coursera explaining the basic concepts of Topological Sort.
Topological sort could also be done via BFS.

public class Solution {//DFS
    public boolean canFinish(int numCourses, int[][] prerequisites) {
       int len=prerequisites.length;
       HashMap<Integer,ArrayList<Integer>> map=new HashMap<>();//Hashmap to record point and its children
       for(int i=0;i<len;i++){
           int visit=prerequisites[i][1]; 
           if(map.containsKey(visit)){
              map.get(visit).add(prerequisites[i][0]); 
           }else{
               ArrayList<Integer> list=new ArrayList<>();
               list.add(prerequisites[i][0]);
               map.put(visit,list);
           }
       }
       int[] record=new int[numCourses];
        for(int i=0;i<numCourses;i++){
            if(!dfs(map,i,record))return false;
        }
    return true;}
    private boolean dfs(HashMap<Integer,ArrayList<Integer>> map,int num,int[] record){
        if(record[num]==1)return false;//is visiting
        if(record[num]==2)return true;//visited
        if(!map.containsKey(num))return true;//!!! remember to check!
        record[num]=1;
        for(int a:map.get(num)){//check
            if(record[a]==1||!dfs(map,a,record))return false;
        }
        record[num]=2;
    return true;}
}
