Jump Game II Total Accepted: 14404 Total Submissions: 58689 My Submissions
Given an array of non-negative integers, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Your goal is to reach the last index in the minimum number of jumps.

For example:
Given array A = [2,3,1,1,4]

The minimum number of jumps to reach the last index is 2. (Jump 1 step from index 0 to 1, then 3 steps to the last index.)

//two solutions, solution 1 like dp
public class Solution {
    public int jump(int[] A) {
       int[] steps = new int[A.length];
        
        steps[0] = 0;
        for (int i = 1; i < A.length; i++) {
            steps[i] = Integer.MAX_VALUE;
            for (int j = 0; j < i; j++) {
                if (steps[j] != Integer.MAX_VALUE && j + A[j] >= i) {
                    steps[i] = Math.min(steps[j] + 1,steps[i]);
                    break;
                }
            }
        }
        
        return steps[A.length - 1];}  
}
//solution two, use greedy
public class Solution {//use greedy,logic!!!
    public int jump(int[] A) {
       if(A.length<=1)return 0;
       int cur=0,i=0,next=0,count=0;
       for(;i<A.length-1;i++){
           cur=Math.max(cur,i+A[i]);
          if(cur==i) break;//optimization, not necessary,means it is 0, cannot move forward, do not waste time here, so break!
           if(i==next){// next is to help update count!!!
               next=cur;
               count++;
           }
           if(next>=A.length-1)break;//cannot use cur>=A.length-1 as break condition!!!since it cannot update count! We use next to help update count
       }
   return count;}  
}

//Python3:
class Solution:
    def jump(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        res = 0
        last = 0
        cur = 0
        for i in range(len(nums)):
            if i > cur:
                cur = last
                res+=1
            last = max(nums[i]+i, last)
        return res
