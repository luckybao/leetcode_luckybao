Search in Rotated Sorted Array Total Accepted: 22228 Total Submissions: 77698 My Submissions
Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

public class Solution {
    public int search(int[] A, int target) {
        if(A.length==0)return -1;
        int l,r,mid,revert;
        l=0;r=A.length-1;
        while(l<=r){
            mid=(l+r)/2;
            if(target==A[l])return l;
            else if(target==A[r])return r;
            else if(target==A[mid])return mid;
            else if(target>A[l]&&target<A[mid]||(A[mid]<A[l]&&(target<A[mid]||target>A[l]))){
                r=mid-1;
            }
            else if(target>A[mid]&&target<A[r]||(A[r]<A[mid]&&(target>A[mid]||target<A[r]))){
                l=mid+1;
            }
            else return -1;
        }
    return -1;}
}

Python 3:
class Solution:
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        ln = len(nums)
        if ln <1 : return -1
        l = 0
        r = ln-1
        while l < r:
            mid = (r + l) //2
            if target == nums[mid]: return mid
            if target == nums[l]: return l
            if target == nums[r]: return r
            if nums[l] > nums[mid]:
                if target > nums[l] or target < nums[mid]:
                    r = mid-1
                else:
                    l = mid+1
            else: 
                if target > nums[l] and target < nums[mid]:
                    r = mid-1
                else: l = mid+1
        if l == r and nums[l] == target: return l
        return -1
