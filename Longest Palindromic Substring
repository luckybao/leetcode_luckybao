Longest Palindromic Substring Total Accepted: 16530 Total Submissions: 80249 My Submissions
Given a string S, find the longest palindromic substring in S. You may assume that the maximum length of S is 1000, and there exists one unique longest palindromic substring.

//solution one, try one by one as a center of palindrom
public class Solution {//O(n^2)time complexity, O(1)space
    public String longestPalindrome(String s) {
       if(s.length()<=1)return s;
       int max=1,begin=0,end=0,cur,n;
       for(int i=0;i<s.length();i++){
            cur=0;n=0;//s.charAt(i)is left part
        while((i-cur>=0)&&((i+cur+1)<s.length())){
            if(s.charAt(i-cur)==s.charAt(i+cur+1)){
                n+=2;
                if(n>max){max=n;begin=i-cur;end=i+cur+1;}
                //if(cur==s.length()/2)break;//in time prune
            cur++;}else break;
        }
        cur=1;n=1;//s.charAt(i)is center
         while((i-cur>=0)&&((i+cur)<s.length())){
            if(s.charAt(i-cur)==s.charAt(i+cur)){
                n+=2;
                if(n>max){max=n;begin=i-cur;end=i+cur;}
                cur++;}else break;////in time prune
        }
       } 
    return s.substring(begin,end+1);}
}

//solution two, linear time and complexity
public class Solution {//O(n)time complexity, O(n)space
//http://leetcode.com/2011/11/longest-palindromic-substring-part-ii.html
    public String longestPalindrome(String s) {
       if(s.length()<=1)return s;
       int len=s.length();
       int[] P=new int[len*2+3];
       char[] c=new char[len*2+3];
       for(int i=0;i<len;i++){
           c[i*2+2]=s.charAt(i);
           c[i*2+1]='#';
       }
       c[0]='%';c[len*2+1]='#';c[len*2+2]='&';//pad end
       int right=0,center=0;
       for(int i=1;i<c.length-1;i++){//attention here!i=1,right=0
       int mirror=2*center-i;
           if(i<right)P[i]=Math.min(right-i,P[mirror]);//based on giant shoulder, do not to calculate if i<right
           while(c[i+(P[i]+1)]==c[i-(P[i]+1)])P[i]++;
           if(i+P[i]>right){//change center
               right=i+P[i];
               center=i;
           }
       }
       int max=0,index=0;
       for(int i=0;i<P.length;i++){
           if(P[i]>max){max=P[i];index=i;}
       }
    return s.substring((index-1-max)/2,(index-1+max)/2);}
}
solution three, DP
public class Solution {
    public String longestPalindrome(String s) {
         int len = s.length();
        boolean[][] dp = new boolean[len][len];
        int maxL = 0, start = 0, end = 0;
        
        for (int i = 0; i < len; i++){
            for (int j = 0; j < i; j++){
                if ((s.charAt(j) == s.charAt(i)) && (i - j < 2 || dp[j+1][i-1])){  // 
                    dp[j][i] = true;
                }
                if (dp[j][i] && maxL <(i - j + 1)){
                    maxL = i - j + 1;
                    start = j;
                    end = i;
                }
            }
            dp[i][i] = true; //every charactor is a palindrome
        }
        return s.substring(start, end + 1);
    }
}
//solution like first one, but cleaner wrapped in class, but very tricky be careful!
public class Solution {
    public String longestPalindrome(String s) {
        if(s.length()<=1)return s;
        String res=s.substring(0,1);
        int begin=0,end=0,max=1;
        for(int i=0;i<s.length()-1;i++){
            String temp; //be sure to add "temp"! since we have two strings to compare, includes res it would be three! 
            String center=check(s,i,i,-1,max);
            String space=check(s,i,i+1,0,max);
            temp=center.length()>space.length()?center:space;
            res=res.length()>temp.length()?res:temp;
        }
    return res;}
    private String check(String s,int l,int r,int len,int max){
        int begin=l,end=l;// here be careful do not use "end=r"! or it may return wrong answer even if we do not find a palindrome! 
        //since the longest we set in the code is "1", so if "end=r" it would return "2" even did not find, eg"ccd"
       while(l>=0&&r<s.length()){
                if(s.charAt(l)==s.charAt(r)){
                    len+=2;
                   if(len>max){begin=l;end=r;max=len;} 
                   l--;r++;
                }else break;
            }
    return s.substring(begin,end+1);}
}
