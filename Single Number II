Single Number II Total Accepted: 15913 Total Submissions: 48549 My Submissions
Given an array of integers, every element appears three times except for one. Find that single one.

Note:
Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?
//solution one
public class Solution { //www.mitbbs.com/article_t/JobHunting/32547143.html
    public int singleNumber(int[] A) {
     int[] count=new int[32];
     int result=0;
     for (int i=0;i<32;i++){
         count[i]=0;
         for (int j=0;j<A.length;j++){
             count[i] = (count[i] + ((A[j] >> i) & 1)) % 3;
         }
     result+=(count[i] << i);}
     
     
    return result;}
}

//solution two
public class Solution { //www.mitbbs.com/article_t/JobHunting/32547143.html
    public int singleNumber(int[] A) {
     int n1=0, n2=0; // n1:leftover of %3 is 1 ;n2:leftover of %3 is 2
      for (int i=0; i<A.length; ++i) {
          int n0 = ~(n1|n2); // 
          // 
          n2 = (n2&~A[i]) | (n1&A[i]); 
          // 
          n1 = (n1&~A[i]) | (n0&A[i]); 
      }
      return n1; // 
}
}

//solution three
public class Solution { //www.mitbbs.com/article_t/JobHunting/32547143.html
    public int singleNumber(int[] A) {
     int n1=0, n2=0; // 
      for(int i=0;i<A.length;i++){
          int n0=~(n1|n2);
          n2=(A[i]&n1)|((~A[i])&n2);
          n1=(n0&A[i])|(n1&(~A[i]));
      }
      return n1; // 
}
}
