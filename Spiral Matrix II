Spiral Matrix II Total Accepted: 11671 Total Submissions: 37898 My Submissions
Given an integer n, generate a square matrix filled with elements from 1 to n2 in spiral order.

For example,
Given n = 3,

You should return the following matrix:
[
 [ 1, 2, 3 ],
 [ 8, 9, 4 ],
 [ 7, 6, 5 ]
]

public class Solution {
    public int[][] generateMatrix(int n) {
        int[][] result=new int[n][n];
        if(n==0) return result;
        int i=1,row=0, col=0,circle=0;//circle to record which circle is in(from peripheral to center)
        while(circle<(n+1)/2){
            for(col=circle;col<=n-1-circle;col++)//be aware that col/row was changed before go into next cycle, do not use if possible because easy to have mistakes
            {result[circle][col]=i;
                i++;
            }
            for(row=circle+1;row<=n-1-circle;row++){
                result[row][n-1-circle]=i;
                i++;
            }
            for(col=n-1-circle-1;col>=circle;col--){
                result[n-1-circle][col]=i;
                i++;
            } 
            for(row=n-1-circle-1;row>circle;row--){
                result[row][circle]=i;
                i++;
            } 
            circle++;
        }
    return result;}
}

//Python3:
class Solution:
    def generateMatrix(self, n):
        """
        :type n: int
        :rtype: List[List[int]]
        """
        res = [[0 for i in range(n)] for j in range(n)]
        direction = 0
        l = 0
        r = n-1
        u = 0
        d = n-1
        if n == 0: return res
        count = 1
        while l <= r and u <=d :
            temp = []
            if direction == 0:
                for i in range(l, r+1):
                    res[u][i] = count
                    count+=1
                u+=1
            if direction == 1:
                for i in range(u, d+1):
                    res[i][r]= count
                    count+=1
                r-=1
            if direction == 2:
                for i in range(r, l-1, -1):
                    res[d][i]= count
                    count+=1
                d-=1
            if direction == 3:
                for i in range(d, u-1, -1):
                    res[i][l]= count
                    count+=1
                l+=1
            direction = (direction+1)%4
        return res
