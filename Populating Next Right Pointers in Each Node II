Populating Next Right Pointers in Each Node II Total Accepted: 16382 Total Submissions: 53942 My Submissions
Follow up for problem "Populating Next Right Pointers in Each Node".

What if the given tree could be any binary tree? Would your previous solution still work?

Note:

You may only use constant extra space.
For example,
Given the following binary tree,
         1
       /  \
      2    3
     / \    \
    4   5    7
After calling your function, the tree should look like:
         1 -> NULL
       /  \
      2 -> 3 -> NULL
     / \    \
    4-> 5 -> 7 -> NULL
    
    /**
 * Definition for binary tree with next pointer.
 * public class TreeLinkNode {
 *     int val;
 *     TreeLinkNode left, right, next;
 *     TreeLinkNode(int x) { val = x; }
 * }
 */
public class Solution {//neat solution
    public void connect(TreeLinkNode root) {
        TreeLinkNode first = root;  
   while (first != null) {  
     fillRow(first);  
     // move to next level  
     while (first != null && first.left == null && first.right == null) first = first.next;  
     if (first != null) first = (first.left != null) ? first.left : first.right;  
   } 
    }
   public void fillRow(TreeLinkNode cur){
   while (cur != null) {
   if (cur.left != null && cur.right != null) {  
       cur.left.next = cur.right;  
     }  
   
     // find next has-child node  
     TreeLinkNode next = cur.next;  
     while (next != null && next.left == null && next.right == null) {  
       next = next.next;  
     }  
     if (next == null) break;  
     // find next child and link it  
     TreeLinkNode nextChild = (next.left != null) ? next.left : next.right;  
     if (cur.right != null) {  
       cur.right.next = nextChild;  
     } else if (cur.left != null) {  
       cur.left.next = nextChild;  
     }  
   
     // move to next has-child node directly  
     cur = next;  
   }  
 } 
}

//same logic, by my own, be very careful!
/**
 * Definition for binary tree with next pointer.
 * public class TreeLinkNode {
 *     int val;
 *     TreeLinkNode left, right, next;
 *     TreeLinkNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void connect(TreeLinkNode root) {
        if(root==null)return;
        root.next=null;
        TreeLinkNode cur=root;// a pointer to help!
        while(true){
            cur=FillRow(cur);
            if(cur==null)return;
        }
    }
    private TreeLinkNode FillRow(TreeLinkNode root){
        TreeLinkNode r=null;
        while(root!=null&&root.left==null&&root.right==null)root=root.next;
        if(root==null)return null;
         r=root.left!=null?root.left:root.right;
        while(root!=null){
            if(root.left!=null&&root.right!=null)root.left.next=root.right;
            TreeLinkNode cur=root.right==null?root.left:root.right;
            root=root.next;//be careful to move the pointer next!!!
            while(root!=null&&root.left==null&&root.right==null)root=root.next;
            if(root==null){cur.next=null;return r;}
           cur.next=root.left==null?root.right:root.left;
        }
    return r;}
}
