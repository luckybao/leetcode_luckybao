Wildcard Matching Total Accepted: 10224 Total Submissions: 75260 My Submissions
Implement wildcard pattern matching with support for '?' and '*'.

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "*") → true
isMatch("aa", "a*") → true
isMatch("ab", "?*") → true
isMatch("aab", "c*a*b") → false

public class Solution {
    public boolean isMatch(String s, String p) {  
   //dp
   if(s==null||p==null)return false;
   int count=0;
   for(int i=0;i<p.length();i++){
       if(p.charAt(i)!='*')count++;
   }
   if(count>s.length())return false;//optimization, in order to pass large data sets
   boolean[] matches=new boolean[s.length()+1];//add dummy node
   matches[0]=true;
   int firstmatch=0;
   for(int i=0;i<p.length();i++){
    //   if (i > 0 && p.charAt(i) == '*' && p.charAt(i-1) == '*') {  //skip duplicates,optimization
    //   continue;  
    //  }  
       if(p.charAt(i)=='*'){
           for(int j=firstmatch+1;j<=s.length();j++)matches[j]=true;
       }else{
           int match=0;
           for(int j=s.length();j>firstmatch;j--){//fill up backward!!!
               {matches[j]=(p.charAt(i)==s.charAt(j-1)||p.charAt(i)=='?')&&matches[j-1];
               if(matches[j])match=j;}
           }
           if(match==0)return false;
           firstmatch=match;
       }
   }
 return matches[s.length()];}  
}

//Python:
class Solution:
    def isMatch(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: bool
        """
        dp = [[False for j in range(len(p)+1)] for i in range (len(s)+1)]
        dp[0][0] = True
        for j in range(1,len(p)+1):
            if p[j-1] == '*':
                dp[0][j] = dp[0][j-1]
        for i in range(1, len(s)+1):
            for j in range(1, len(p)+1):
                if p[j-1]!='*':
                    dp[i][j] = dp[i-1][j-1] and (p[j-1] == s[i-1] or p[j-1] == '?')
                else:
                    dp[i][j] = (dp[i][j-1] or dp[i-1][j])
        return dp[len(s)][len(p)]
