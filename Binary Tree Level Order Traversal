Binary Tree Level Order Traversal Total Accepted: 17316 Total Submissions: 56402 My Submissions
Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 //one solution like levelordertravelsal II, use either queue/arraydeque, calculate size of each level
 //here is another solution, using flag "null", attention arraydeque cannot use "null"
public class Solution {//using just one row to store WITH queue, using "null" to flag each level
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> resSet=new ArrayList<List<Integer>>();
        if (root == null) return resSet;  
   Queue<TreeNode> queue = new LinkedList<TreeNode>();  
   queue.add(root);  
   queue.add(null); // flag of end-of-level  
   while (!queue.isEmpty()) {  
     ArrayList<Integer> res = new ArrayList<Integer>();  
     TreeNode cur = queue.remove();  
     while (cur != null) { // go through one level  
       res.add(cur.val);  
       if (cur.left != null) queue.add(cur.left);  
       if (cur.right != null) queue.add(cur.right);  
       cur = queue.remove();  
     }  
     // add result of one level  
     resSet.add(res);  
     // add a flag for end-of-level if needed  
     if (!queue.isEmpty()) queue.add(null);  
   }  
   return resSet;  
 }
}
