Edit Distance Total Accepted: 12891 Total Submissions: 51140 My Submissions
Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)

You have the following 3 operations permitted on a word:

a) Insert a character
b) Delete a character
c) Replace a character

public class Solution {//dp, less space, pad a dummy in front to eliminate unnecessary errors!!!
    public int minDistance(String word1, String word2) {
        int l1=word1.length(),l2=word2.length();
        if(word1.length()==0)return l2;
        if(word2.length()==0)return l1;
        int[][] dp=new int[l1+1][2];// !!!
        for(int i=0;i<=l1;i++){
            dp[i][0]=i;
        }
        int jj=1,pre=0;
            for(int j=1;j<=l2;j++){
                jj=j&1;//jj is even or odd
                dp[0][jj]=j;
               for(int i=1;i<=l1;i++){
                if(word1.charAt(i-1)==word2.charAt(j-1))
                dp[i][jj]=dp[i-1][pre];
                else dp[i][jj]=1+Math.min(dp[i][pre],Math.min(dp[i-1][jj],dp[i-1][pre]));
            }
            pre=jj;
        }
    return dp[l1][jj];}
}
//solution two, classical
public class Solution {
    public int minDistance(String word1, String word2) {
        int n = word1.length();
        int m = word2.length();
        
        int[][] dp = new int[n+1][m+1];
        for(int i=0; i< m+1; i++){
            dp[0][i] = i; 
        }
        for(int i=0; i<n+1; i++){
            dp[i][0] = i;
        }
        
        
        for(int i = 1; i<n+1; i++){
            for(int j=1; j<m+1; j++){
                if(word1.charAt(i-1) == word2.charAt(j-1)){
                    dp[i][j] = dp[i-1][j-1];
                }else{
                    dp[i][j] = 1 + Math.min(dp[i-1][j-1],Math.min(dp[i-1][j],dp[i][j-1]));
                }
            }
        }
        return dp[n][m];
    }
}
