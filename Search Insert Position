Search Insert Position Total Accepted: 15716 Total Submissions: 45420 My Submissions
Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Here are few examples.
[1,3,5,6], 5 → 2
[1,3,5,6], 2 → 1
[1,3,5,6], 7 → 4
[1,3,5,6], 0 → 0

public class Solution {
    public int searchInsert(int[] A, int target) {
        int low = 0, high = A.length - 1;  
   while (low <= high) {  
     int mid = (low + high) / 2;  
     if (A[mid] == target) return mid;  
     if (A[mid] < target) {  
       low = mid + 1;  
     } else {  
       high = mid - 1;  
     }  
   }  
   return low;
}
}

Python:
class Solution:
    def searchInsert(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        ln = len(nums)
        if ln == 0: return 0
        l = 0
        r = ln-1
        while(r-l > 1):
            mid = (r+l)//2
            if target == nums[mid]: return mid
            if target > nums[mid]:
                l = mid
            else : r = mid
        if target > nums[l] and target < nums[r] :
            return l+1
        if target == nums[r] : return r
        if target == nums[l]:return l
        if target > nums[r]: return r +1
        return l
        
 class Solution:
    # @param A, a list of integers
    # @param target, an integer to be inserted
    # @return integer
    def searchInsert(self, A, target):
        left = 0; right = len(A) - 1
        while left <= right:
            mid = ( left + right ) / 2
            if A[mid] < target:
                left = mid + 1
            elif A[mid] > target:
                right = mid - 1
            else:
                return mid
        return left
