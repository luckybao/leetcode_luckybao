//recursive !!!
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int maxDepth(TreeNode root) {
        int level=0;
        if(root==null) return 0;//!!! could not use return null!
       level=Math.max(maxDepth(root.left),maxDepth(root.right))+1;//!!!need Math library!
       return level;
        
    }
}

//iterative!!!
public class Solution {
    public int maxDepth(TreeNode root) {
        int len = 0;  
   LinkedList<TreeNode> que = new LinkedList<TreeNode>();  
   if (root != null) {  
     que.addLast(root);  
     que.addLast(null); // add a special node for level breaker  
   }  
   
   while (!que.isEmpty()) {  
     TreeNode cur = que.removeFirst();  
     if (cur == null) { // finish one level  
       ++len;  
       if (!que.isEmpty()) que.addLast(null);  
     } else {  
       if (cur.left != null) que.addLast(cur.left);  
       if (cur.right != null) que.addLast(cur.right);  
     }  
   }  
   
   return len;
}
}
