Insert Interval Total Accepted: 12591 Total Submissions: 61911 My Submissions
Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].

Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].

This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {//elegant solution, change newintervals along the way, one pass, find where to insert, record, then insert
//just three cases for find: 1. if interval.end<newinterval.start, continue;2. interval.end and interval.start>newinterval, insert here;3. inbetween, than change range of new interval, continue
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        List<Interval> res=new ArrayList<Interval>();
        if(intervals.size()==0){res.add(newInterval); return res;}
        int pos=0;
        for(Interval interval:intervals){
            if(interval.end<newInterval.start){res.add(interval);pos++;}
            else if(interval.start>newInterval.end){res.add(interval);}
            else {
                newInterval.start=Math.min(newInterval.start,interval.start);
                newInterval.end=Math.max(newInterval.end,interval.end);
            }
        }
        res.add(pos,newInterval);
    return res;}
}
//Python:
class Solution:
    def insert(self, intervals, newInterval):
        """
        :type intervals: List[Interval]
        :type newInterval: Interval
        :rtype: List[Interval]
        """
        res = intervals
        if len(intervals) == 0: 
            res.append(newInterval)
            return res
        for i in range(len(intervals)):
            if newInterval.start > intervals[i].end:
                continue
            else:
                start = i
                while i < len(intervals) and newInterval.end>= intervals[i].start:
                    i+=1
                return intervals[:start]+self.merge(intervals[start:i], newInterval)+intervals[i:]
        if i == len(intervals)-1: res.append(newInterval)
        return res
    def merge(self, intervals, newInterval):
        intervals.append(newInterval)
        intervals.sort(key=lambda a: a.start)
        res = []
        res.append(intervals[0])
        for i in range(1, len(intervals)):
            if intervals[i].start <= res[len(res)-1].end:
                res[len(res)-1].end = max(res[len(res)-1].end, intervals[i].end)
            else:
                res.append(intervals[i])
        return res
        
