Combination Sum II Total Accepted: 12665 Total Submissions: 51892 My Submissions
Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used once in the combination.

Note:
All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The solution set must not contain duplicate combinations.
For example, given candidate set 10,1,2,7,6,1,5 and target 8, 
A solution set is: 
[1, 7] 
[1, 2, 5] 
[2, 6] 
[1, 1, 6] 


//logic!!! how to handle duplicate? we can add each one as combinationsum1, after add each number, when check whether the next is the same, since we had considered this number, just skip all the duplicates!!!
public class Solution {
    public List<List<Integer>> combinationSum2(int[] num, int target) {
      List<List<Integer>> res=new ArrayList<List<Integer>>();
      List<Integer> list=new ArrayList<Integer>();
       if(num.length==0)return res;
       Arrays.sort(num);
       return build(res,num, target,0,list);
        
    }
    private List<List<Integer>> build(List<List<Integer>> res,int[] num, int target,int start,List<Integer> list){
        if(start>num.length||target<0){return res;}
        if(target==0){
           List<Integer> temp=new ArrayList<Integer>(list); 
           res.add(temp);
           return res;
        }
        for(int i=start;i<num.length&& num[i] <= target;i++){
            list.add(num[i]);
          build(res,num,target-num[i],i+1,list);
        list.remove(list.size()-1);  
        while(i<num.length-1&&num[i+1]==num[i])i++;// can also use "if(i>start&&num[i-1]==num[i])continue;" at the beginnning, like subset sum, it is dfs
        }
    return res;}
}
