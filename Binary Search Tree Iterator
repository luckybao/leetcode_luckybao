Binary Search Tree Iterator Total Accepted: 18784 Total Submissions: 64129 My Submissions Question Solution 
Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.

Calling next() will return the next smallest number in the BST.

Note: next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.

Credits:
Special thanks to @ts for adding this problem and creating all test cases.

//http://yuanhsh.iteye.com/blog/2173429 
//emample from others

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

public class BSTIterator {
    Stack<TreeNode> stack=new Stack<>();

    public BSTIterator(TreeNode root) {
        pushleft(root);
    }
    
    private void pushleft(TreeNode root){
        while(root!=null){stack.push(root);root=root.left;}
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        if(stack.isEmpty())return false;
        else return true;
    }

    /** @return the next smallest number */
    public int next() {
        TreeNode cur=stack.pop();
        pushleft(cur.right);
        return cur.val;
    }
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = new BSTIterator(root);
 * while (i.hasNext()) v[f()] = i.next();
 */
