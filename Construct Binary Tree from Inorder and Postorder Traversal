Construct Binary Tree from Inorder and Postorder Traversal Total Accepted: 13090 Total Submissions: 49688 My Submissions
Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {// work from backward
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        if(inorder.length!=postorder.length||inorder.length==0)return null;
        HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
        for(int i=0;i<inorder.length;i++){
            map.put(inorder[i],i);
        }
        return build(postorder,map,0,postorder.length-1,postorder.length-1);
    }
    public TreeNode build(int[] postorder,HashMap<Integer,Integer> map, int start,int end,int cur){
        //start and end indicate the start/end point in "inorder[]", cur is in postorder[] 
        if(start>end)return null;
        TreeNode root=new TreeNode(postorder[cur]);
        int rootlocation=map.get(postorder[cur]);
            root.left=build(postorder,map,start,rootlocation-1,cur-end+rootlocation-1);
            root.right=build(postorder,map,rootlocation+1,end,cur-1);
    return root;}
}
