//Reverse digits of an integer.

Example1: x = 123, return 321
Example2: x = -123, return -321

//click to show spoilers.

//Have you thought about this?
//Here are some good questions to ask before coding. Bonus points for you if you have already thought through this!

//If the integer's last digit is 0, what should the output be? ie, cases such as 10, 100.

//Did you notice that the reversed integer might overflow? Assume the input is a 32-bit integer, then the reverse of 1000000003 overflows. How should you handle such cases?

//Throw an exception? Good, but what if throwing an exception is not an option? You would then have to re-design the function (ie, add an extra parameter).

public class Solution {
    public int reverse(int x) {
        int i=0, results=0;
        if(x==0) return 0;
        if(x<0){x=-x;
        while(x>0){
            i=x%10;
            results=results*10+i;
            x=x/10;
        }
        results=-results;
        }
        if(x>0) {while(x>0){
            i=x%10;
            results=results*10+i;
            x=x/10;
        }
        }
        return results;
    }
}

//create a sign, cleaner code
public class Solution {
    public int reverse(int x) {
        int sign = x>=0?1:-1;
        x = x>=0? x:-x;
        int res = 0;
            while(x!=0){
            res *= 10;
            res +=x%10;
            x = x/10;            
        }
            res = res*sign;
        return res;
    }
}

//Handle Overflow using recording of previous record

class Solution {
    public int reverse(int x) {
        int sign = x>=0?1:-1;
        x = x>=0? x:-x;
        int res = 0, prev = res;
        //handle overflow using Prev
            while(x!=0){
            res *= 10;
            res +=x%10;
            if((res - x%10)/10!= prev)return 0;
            x = x/10;  
            prev = res;
        }
            res = res*sign;
        return res;}
}
