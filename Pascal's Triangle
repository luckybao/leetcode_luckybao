Pascal's Triangle Total Accepted: 15199 Total Submissions: 47822 My Submissions
Given numRows, generate the first numRows of Pascal's triangle.

For example, given numRows = 5,
Return

[
     [1],
    [1,1],
   [1,2,1],
  [1,3,3,1],
 [1,4,6,4,1]
]

public class Solution {//a clever compact solution
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> result=new ArrayList<List<Integer>>();//Initialization Attention!!!
       for (int i=0; i<numRows; ++i) {  
     ArrayList<Integer> row = new ArrayList<Integer>();  
     if (i==0) { // first row  
       row.add(1);  
     } else {  
       List<Integer> prerow = result.get(i-1);  
       for (int j=0; j<=i; j++) {  
         int val = ((j > 0) ? prerow.get(j-1) : 0)  
              + ((j < prerow.size()) ? prerow.get(j) : 0);  
         row.add(val);  
       }  
     }  
     result.add(row);  
   }  
    return result;}
}
//another solution, easy to come out
public class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> result=new ArrayList<List<Integer>>();//Initialization Attention!!!
       for (int i=0; i<numRows; ++i) {  
     ArrayList<Integer> row = new ArrayList<Integer>();  
     if (i==0) { // first row  
       row.add(1);  
     } else {  
         row.add(1);
       List<Integer> prerow = result.get(i-1);  
       for (int j=1; j<i; j++) { 
         int val =  prerow.get(j-1)  + prerow.get(j) ;
         row.add(val);  
       }
       row.add(1);
     }  
     result.add(row);  
   }  
    return result;}
    
}
