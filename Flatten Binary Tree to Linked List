Flatten Binary Tree to Linked List Total Accepted: 19828 Total Submissions: 70618 My Submissions
Given a binary tree, flatten it to a linked list in-place.

For example,
Given

         1
        / \
       2   5
      / \   \
     3   4   6
The flattened tree should look like:
   1
    \
     2
      \
       3
        \
         4
          \
           5
            \
             6
click to show hints.

Hints:
If you notice carefully in the flattened tree, each node's right child points to the next node of a pre-order traversal.

//solution one,iterative
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {//iterative,without stack, without recursion, neat, NOT MORRIS!!!
    public void flatten(TreeNode root) {
 TreeNode dummy=root,cur=root;
 if(cur==null)return;
 while(cur!=null){
    //dummy=cur;
    if(cur.left!=null){
       TreeNode temp=cur.right;
        cur.right=cur.left;
        cur.left=null;
        while(cur.right!=null)cur=cur.right;
        cur.right=temp;}
        dummy=dummy.right;
        cur=dummy;}
}
}

//solution two, recursion
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {//recursion
    public void flatten(TreeNode root) {
 if(root==null)return;
 TreeNode cur=root;
 if(root.left!=null){
     TreeNode temp=root.right;
     root.right=root.left;
     root.left=null;
     while(root.right!=null)root=root.right;
     root.right=temp;
 }
 flatten(cur.right);
}
}
