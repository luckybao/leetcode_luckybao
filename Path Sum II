Path Sum II Total Accepted: 17878 Total Submissions: 66159 My Submissions
Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
return
[
   [5,4,11,2],
   [5,8,4,5]
]
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> res=new ArrayList<List<Integer>>();
        List<Integer> list=new ArrayList<Integer>();
        if(root==null)return res;
        return build(root,sum,res,list);
    }
    private List<List<Integer>> build(TreeNode root, int sum,List<List<Integer>> res,List<Integer> list){
        List<Integer> temp=new ArrayList<Integer>(list);
        temp.add(root.val);
        if(root.left==null&&root.right==null){
            if(sum==root.val)res.add(temp);
            return res;  }
        if(root.left!=null)build(root.left,sum-root.val,res,temp);
        if(root.right!=null)build(root.right,sum-root.val,res,temp);
   return res; }
}
