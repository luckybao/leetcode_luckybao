You may only use constant extra space.
You may assume that it is a perfect binary tree (ie, all leaves are at the same level, and every parent has two children).
For example,
Given the following perfect binary tree,
         1
       /  \
      2    3
     / \  / \
    4  5  6  7
After calling your function, the tree should look like:
         1 -> NULL
       /  \
      2 -> 3 -> NULL
     / \  / \
    4->5->6->7 -> NULL
    
  
  /**
 * Definition for binary tree with next pointer.
 * public class TreeLinkNode {
 *     int val;
 *     TreeLinkNode left, right, next;
 *     TreeLinkNode(int x) { val = x; }
 * }
 */
 //RECURSIVE
public class Solution {
    public void connect(TreeLinkNode root) {//recursive
        if(root==null)return;
        TreeLinkNode node;
        node=root;
        if(node.left!=null){
            if(node.next!=null){
            node.left.next=node.right;
            node.right.next=node.next.left;
            }else{
             node.left.next=node.right;
            node.right.next=null;   
            }
        }
connect(node.left);
connect(node.right);
        return;
    }
}

//ITERATIVE
public class Solution {
    public void connect(TreeLinkNode root) {
        if(root==null)return;
        TreeLinkNode node;
        node=root;root.next=null;
        while(node!=null){
            if(node.left!=null){
                TreeLinkNode cur=node;// set a cursor
                while(cur.next!=null)//set right to next!!!!full level!
                {cur.right.next=cur.next.left;
                cur.left.next=cur.right;
                cur=cur.next;}
                     cur.left.next=cur.right;
                cur.right.next=null; 
                node=node.left;
                }
             else return;
        }
        return;
    }
}
