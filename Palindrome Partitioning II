Palindrome Partitioning II Total Accepted: 12399 Total Submissions: 69199 My Submissions
Given a string s, partition s such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of s.

For example, given s = "aab",
Return 1 since the palindrome partitioning ["aa","b"] could be produced using 1 cut.

//dp, cannot use backtracking this time since TLE, not like Palintrome I
public class Solution {
    public int minCut(String s) {
    if(s.length()<=1)return 0;
    boolean[][] matrix=new boolean[s.length()][s.length()];
        for(int i=0;i<s.length();i++){
            for(int j=i;j>=0;j--){
                if(s.charAt(i)==s.charAt(j)){
                    if(i-j<=2)matrix[j][i]=true;
                    else if(matrix[j+1][i-1]) matrix[j][i]=true;
                }
            }
        }
        int[] cut=new int[s.length()];
        cut[0]=0;
        for(int i=1;i<s.length();i++){
            cut[i]=cut[i-1]+1;
            int j=0;
            while(j<=i){
                if(matrix[j][i]){
                    if(j!=0){cut[i]=Math.min(cut[j-1]+1,cut[i]);}//be careful here!
                    else {cut[i]=0;break;}
                }
            j++;}
        }
    return cut[s.length()-1];}
}
