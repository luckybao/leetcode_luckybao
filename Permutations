Permutations Total Accepted: 19056 Total Submissions: 61212 My Submissions
Given a collection of numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].

public class Solution {//third solution
// select one number, i, from n of them.
// Compute permutations of the rest n-1 numbers.
// Append i to the end of each permutation computed in above step. Note that adding a number to the end of array takes time O(1) while adding to the beginning takes time O(n).
    public List<List<Integer>> permute(int[] num) {
     List<List<Integer>> res=new ArrayList<List<Integer>>(); 
     if(num.length==0)return res;//base case
     List<Integer> list=new ArrayList<Integer>();
     if(num.length==1){list.add(num[0]);res.add(list);return res;}//base case
     for(int i=0;i<num.length;i++){
        int[] sub=new int[num.length-1]; 
        for(int j=0;j<i;j++)sub[j]=num[j];
        for(int j=i+1;j<num.length;j++)sub[j-1]=num[j];
        for(List<Integer> temp:permute(sub)){
            temp.add(num[i]);
            res.add(temp);
        }
     }
    return res;}
}


public class Solution {//another solution, like backtracking
    public List<List<Integer>> permute(int[] num) {
     List<List<Integer>> result=new ArrayList<List<Integer>>(); 
     if(num.length==0)return result;
     List<Integer> list=new ArrayList<Integer>();
    return helper(num, result,list);}
    public List<List<Integer>> helper(int[] num,  List<List<Integer>> result,List<Integer> list){
        if(list.size()>=num.length){
            List<Integer> temp=new ArrayList<Integer>(list);
            result.add(temp);
            return result;}
        for(int i=0;i<num.length;i++){
            if(list.contains(num[i]))continue;
            list.add(num[i]);
            helper(num,result,list);
            list.remove(list.size()-1);
        }
         return result;  }
}
