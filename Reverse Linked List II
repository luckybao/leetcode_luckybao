Reverse Linked List II Total Accepted: 16012 Total Submissions: 61818 My Submissions
Reverse a linked list from position m to n. Do it in-place and in one-pass.

For example:
Given 1->2->3->4->5->NULL, m = 2 and n = 4,

return 1->4->3->2->5->NULL.

Note:
Given m, n satisfy the following condition:
1 ≤ m ≤ n ≤ length of list.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        if(head==null||head.next==null||m>=n||m<1)return head;
        int count=1;
        ListNode dummy=new ListNode(0);
        dummy.next=head;
        ListNode pre=dummy,last,cur;
        while(count<m){//find m
            if(pre!=null){pre=pre.next;count++;}
            else return head;
        }
        last=pre.next;cur=last.next;//reverse is tricky, be careful
        while(count<n){//reverse till n, every time, put cur to pre.next
        last.next=cur.next;
        cur.next=pre.next;
        pre.next=cur;//reverse end
 
            cur=last.next;//reverse next
            count++;
        }
    return dummy.next;}
}
