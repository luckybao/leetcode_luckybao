Median of Two Sorted Arrays Total Accepted: 16620 Total Submissions: 96740 My Submissions
There are two sorted arrays A and B of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

public class Solution {
    public double findMedianSortedArrays(int A[], int B[]) {//I need to remember the logic
      int a=A.length,b=B.length,len=a+b;
      if(len==0)return 0.0;
      if((len&1)==1){//odd
          return find(A,0,B,0,len/2+1);
      }else return (find(A,0,B,0,len/2+1)+find(A,0,B,0,len/2))/2.0;
	}
	public double find(int A[], int starta,int B[],int startb,int k){
	   if(starta>=A.length)return B[startb+k-1];
	   if(startb>=B.length)return A[starta+k-1];
	   if(k==1)return Math.min(A[starta],B[startb]);
	   int keya,keyb;
	   if(starta+k/2-1<A.length){
	       keya=A[starta+k/2-1];
	   }else keya=Integer.MAX_VALUE;
	   if(startb+k/2-1<B.length){
	     keyb=B[startb+k/2-1];
	   }else keyb=Integer.MAX_VALUE;
	   if(keya<keyb)return find(A,starta+k/2,B,startb,k-k/2);
	   else return find(A,starta,B,startb+k/2,k-k/2);
	}
}

Python3:
#首先我们来看如何找到两个数列的第k小个数，即程序中getKth(A, B , k)函数的实现。
#用一个例子来说明这个问题：A = {1，3，5，7}；B = {2，4，6，8，9，10}；
#如果要求第7个小的数，A数列的元素个数为4，B数列的元素个数为6；k/2 = 7/2 = 3，而A中的第3个数A[2]=5；
#B中的第3个数B[2]=6；而A[2]<B[2]；则A[0]，A[1]，A[2]中必然不可能有第7个小的数。
#因为A[2]<B[2]，所以比A[2]小的数最多可能为A[0], A[1], B[0], B[1]这四个数，也就是说A[2]最多可能是第5个大的数，由于我们要求的是getKth(A, B, 7)；现在就变成了求getKth(A', B, 4)；
#即A' = {7}；B不变，求这两个数列的第4个小的数，因为A[0]，A[1]，A[2]中没有解，所以我们直接删掉它们就可以了。这个可以使用递归来实现。
class Solution:
    def getk(self, nums1, nums2, k):
        if k == 0: return 0
        if(len(nums2) < len(nums1)): return self.getk(nums2, nums1, k)
        if(len(nums1) == 0): return nums2[k-1]
        if(k == 1): return min(nums1[0], nums2[0])
        pa = min(len(nums1), k//2); pb = k - pa
        if(nums1[pa-1]<= nums2[pb-1]): return self.getk(nums1[pa:], nums2, pb)
        else : return self.getk(nums1, nums2[pb:], pa)
        
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        nums1len = len(nums1)
        nums2len = len(nums2)
        numslensum = nums1len + nums2len
        if (numslensum % 2) ==1 : return self.getk(nums1, nums2, (numslensum+1)//2)
        else : return (self.getk(nums1, nums2, numslensum // 2) + self.getk(nums1, nums2, (numslensum+2)//2)) * 0.5
