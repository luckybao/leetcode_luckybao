Swap Nodes in Pairs Total Accepted: 13887 Total Submissions: 43551 My Submissions
Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode swapPairs(ListNode head) {
        ListNode dummynode=new ListNode(0);
        ListNode cur=dummynode;
        dummynode.next=head;
        while(cur.next!=null&&cur.next.next!=null){//!!!logic! null pointer for cur.next.next.next!!!
            ListNode temp=cur.next;
            cur.next=cur.next.next;
            cur=cur.next;
            temp.next=cur.next;
            cur.next=temp;
            cur=cur.next;
        }
            return dummynode.next;
    }
}

Python:
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def swapPairs(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if head == None or head.next == None: return head
        dummy = ListNode(0)
        cur  = dummy
        l1 = head
        while l1:         
            if l1.next == None: # When there are Odd number of listnode
                cur.next = l1
                return dummy.next
            cur.next = l1.next
            l2 = l1.next
            temp = l2.next
            l2.next = l1
            l1.next = temp
            cur = l1
            l1 = l1.next
        return dummy.next
