Word Search Total Accepted: 12387 Total Submissions: 62707 My Submissions
Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

For example,
Given board =

[
  ["ABCE"],
  ["SFCS"],
  ["ADEE"]
]
word = "ABCCED", -> returns true,
word = "SEE", -> returns true,
word = "ABCB", -> returns false.

public class Solution {//Loop through every cell in the board and perform DFS to match the word. Since a same cell cannot be reused, we also need to keep track of visited cells during DFS and unmark it if it is not being used.
    public boolean exist(char[][] board, String word) {//need to mark visited!!!//recursion!!!
        if(board.length==0)return false;
        if(word.length()==0)return true;
        if(board.length*board[0].length<word.length())return false;
        
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(board[i][j]==word.charAt(0)){
                  if(find(board, word, 0,i,j))return true;  
                }
            }
        }
    return false;}
    private boolean find(char[][] board,String word, int start,int i,int j){
        if(word.length()<=start)return true;
        if(i<0||j<0||i>=board.length||j>=board[0].length||board[i][j]!=word.charAt(start))return false;
        board[i][j]='*';
        boolean res=(find(board,word,start+1,i+1,j)||find(board,word,start+1,i-1,j)||
        find(board,word,start+1,i,j+1)||find(board,word,start+1,i,j-1));
        board[i][j]=word.charAt(start);
        return res;
    }
}
