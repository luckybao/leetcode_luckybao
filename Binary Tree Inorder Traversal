Binary Tree Inorder Traversal Total Accepted: 18682 Total Submissions: 53591 My Submissions
Given a binary tree, return the inorder traversal of its nodes' values.

For example:
Given binary tree {1,#,2,3},
   1
    \
     2
    /
   3
return [1,3,2].

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {//INORDERMORRIS
    public List<Integer> inorderTraversal(TreeNode root) {//iteration
List<Integer> result=new ArrayList<Integer>();
TreeNode cur;
cur=root;
while(cur!=null){
    if(cur.left!=null){
    TreeNode pre=cur.left;//definition, left child's right children point to cursor
   while(pre.right!=null&&pre.right!=cur){pre=pre.right;}//trace to right most one
   if(pre.right==null){pre.right=cur; cur=cur.left;}//set pointer, then continue
   else{result.add(cur.val);cur=cur.right;}
}else{result.add(cur.val);cur=cur.right;}
}
return result;
    }
}

//STANDARD ITERATIVE
public class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {//iteration
        List<Integer> result=new ArrayList<Integer>();
      Stack<TreeNode> helper=new Stack<TreeNode>();
      if(root==null) return result;
      helper.push(root);
      TreeNode top;
      while(!helper.isEmpty()){
          top=helper.peek();
          if(top!=null){
              helper.push(top.left);
          }else{
        helper.pop();
				if (helper.isEmpty()) {
					return result;
				}
				top = helper.pop();
				result.add(top.val);
				helper.push(top.right);
          }
      }
      return result;
    }
}
