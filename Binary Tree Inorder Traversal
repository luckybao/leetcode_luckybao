Binary Tree Inorder Traversal Total Accepted: 18682 Total Submissions: 53591 My Submissions
Given a binary tree, return the inorder traversal of its nodes' values.

For example:
Given binary tree {1,#,2,3},
   1
    \
     2
    /
   3
return [1,3,2].

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {//INORDERMORRIS, it is wrong for(0,1)
    public List<Integer> inorderTraversal(TreeNode root) {//iteration
List<Integer> result=new ArrayList<Integer>();
TreeNode cur = root;  
   
   while (cur != null) {  
     if (cur.left != null) {  
       TreeNode pre = cur.left;  
       while (pre.right != null && pre.right != cur) {  
         pre = pre.right;  
       }  
       if (pre.right == null) { // set right to successor  
         pre.right = cur;  
         cur = cur.left;  
       } else { // visit and revert the change  
         pre.right = null;  
         result.add(cur.val);  
         cur = cur.right;  
       }  
     } else { // visit and move to successor 
       result.add(cur.val);  
       cur = cur.right;  
     }  
   }  
return result;
    }
}

//STANDARD ITERATIVE
public class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {//iteration
        List<Integer> result=new ArrayList<Integer>();
      Stack<TreeNode> helper=new Stack<TreeNode>();
      if(root==null) return result;
      helper.push(root);
      TreeNode top;
      while(!helper.isEmpty()){
          top=helper.peek();
          if(top!=null){
              helper.push(top.left);
          }else{
        helper.pop();
				if (helper.isEmpty()) {
					return result;
				}
				top = helper.pop();
				result.add(top.val);
				helper.push(top.right);
          }
      }
      return result;
    }
}
