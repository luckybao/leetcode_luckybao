Given a binary tree where all the right nodes are either leaf nodes with a sibling (a left node that shares the same parent node) or empty, 
flip it upside down and turn it into a tree where the original right nodes turned into left leaf nodes. 
Return the new root.
For example:
Given a binary tree {1,2,3,4,5},
    1
   / \
  2   3
 / \
4   5
return the root of the binary tree [4,5,2,#,#,3,1].
   4
  / \
 5   2
    / \
   3   1  
   http://www.meetqun.com/thread-2219-1-1.html?x=116
   http://bangbingsyb.blogspot.com/2014/11/leetcode-binary-tree-upside-down.html
   1. Topdown:
   We need to be very careful when reassigning current node’s left and right children. 
   Besides making a copy of the parent node, you would also need to make a copy of the parent’s right child too. 
   The reason is the current node becomes the parent node in the next iteration
   p.left = parent.right;
p.right = parent;
￼￼￼￼￼
public TreeNode UpsideDownBinaryTree(TreeNode root) {
   TreeNode p = root, parent = null, parentRight = null;
   while (p != null) {
      TreeNode left = p.left;
      p.left = parentRight;
      parentRight = p.right;
      p.right = parent;
      parent = p;
p = left; }
   return parent;
}
The above code is actually very similar to the algorithm in reversing a linked list.

Bottom up approach:
Although the code for the top-down approach seems concise, 
it is actually subtle and there are a lot of hidden traps if you are not careful. 
The other approach is thinking recursively in a bottom-up fashion. 
If we reassign the bottom-level nodes before the upper ones, 
we won’t have to make copies and worry about overwriting something. 
We know the new root will be the left-most leaf node, so we begin the reassignment here.
public TreeNode UpsideDownBinaryTree(TreeNode root) {
   return dfsBottomUp(root, null);
}
private TreeNode dfsBottomUp(TreeNode p, TreeNode parent) {
   if (p == null) return parent;
   TreeNode root = dfsBottomUp(p.left, p);
   p.left = (parent == null) ? parent : parent.right;
   p.right = parent;
   return root;
}
1. 对于一个parent来说，加入有right node，必须得有left node。而有left node，right node可以为空。而right node必须为叶子节点。所以该树每层至多有2个节点，并且2节点有共同的parent。
2. 所以对于最底层来说，必有一个left node，而这个left node则为整个新树的根 —— 例子中的4为最底层的左节点，最后成为新树的root。
3. 原树的根节点，变为了新树的最右节点。
3. 对于子树1 2 3来说，需要在以2为根的子树2 4 5建立成新树4 5 2后，插入到新树的最右节点2下面。原树的根节点root为left child，原树root->right为新树的left nnode
总结：
1. 这个递归的核心是，每次建立好一个新的子树后，要返回新子树的最右节点（ln 19)，以便上层的节点可以接回到这个节点的下面。
2. 但如果只返回最右节点，则我们无法知道最后整个新树的根在哪里。所以再base case里必须给新根赋值(ln 12)
3. 每次需要reset最右节点的left/right node，否则最后一层递归，递归到例子中的1节点时，返回前1节点的left/right node仍然为原来的值，而并不为NULL。
