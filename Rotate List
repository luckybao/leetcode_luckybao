Rotate List Total Accepted: 13804 Total Submissions: 62943 My Submissions
Given a list, rotate the list to the right by k places, where k is non-negative.

For example:
Given 1->2->3->4->5->NULL and k = 2,
return 4->5->1->2->3->NULL.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode rotateRight(ListNode head, int n) {//n may be bigger than the length, make it a circular linked list, than cut
        if(head==null||head.next==null)return head;
        int len = 1; ListNode cur = head;  
   while (cur.next!= null) {  
     ++len;  
     cur = cur.next;  
   }  
   cur.next=head;//circle
   cur=head;
   n=len-n%len-1;
   while(n>0){
       cur=cur.next;
       n--;
   }
   ListNode newhead=cur.next;
   cur.next=null;
   return newhead;}
}

Python:
class Solution:
    def rotateRight(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        if head ==None or k == 0: return head
        dummy = ListNode(0)
        dummy.next =head
        cur = dummy
        count = 0
        while(cur.next != None):
            cur = cur.next
            count+=1
        tail = cur
        k = k%(count)
        if k == 0: return head
        cur = dummy.next
        count = count-k
        while(count>1):
            cur = cur.next
            count -=1
        temp = cur.next
        cur.next = None
        tail.next = dummy.next
        dummy.next = temp
        return dummy.next
    
