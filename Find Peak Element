Find Peak Element Total Accepted: 29106 Total Submissions: 92608 My Submissions Question Solution 
A peak element is an element that is greater than its neighbors.

Given an input array where num[i] ≠ num[i+1], find a peak element and return its index.

The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.

You may imagine that num[-1] = num[n] = -∞.

For example, in array [1, 2, 3, 1], 3 is a peak element and your function should return the index number 2.

click to show spoilers.

Note:
Your solution should be in logarithmic complexity.

public class Solution {
    //if the array is always increasing or decreasing, then we need the statement: num[-1]=num[n]=minus infinite, other than that, 
    //we do not need that information, still need to try to find peaks
    //logic: binary search, if nums[mid]>nums[mid+1]&&nums[mid]>nums[mid-1],the middle is the peak, is nums[mid]<nums[mid+1],the peak //is in the left half, else in the right half since num[i] ≠ num[i+1] 
    public int findPeakElement(int[] nums) {
        if(nums.length==0||nums.length==1)return 0;
        int l=0,n=nums.length,r=n-1;
        while(r>l){
            if(r-l<=1){if(nums[r]<nums[l])return l; else return r;}
            int mid=l+(r-l)/2;
            if(nums[mid]>nums[mid+1]&&nums[mid]>nums[mid-1])return mid;
            else if(nums[mid]>nums[mid+1])r=mid-1;
            else l=mid+1;
        }
    return r;}
}
