LRU Cache Total Accepted: 14153 Total Submissions: 104364 My Submissions
Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and set.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
set(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

public class LRUCache {
    //1. using double linked list to achieve O(1)
    //2. use hashmap to maintain table
    //3. for get: if contains, remove key, then set it to head; for set, if contains, remove then set newhead, if not check capacity, if can , set as newhead
    private class Node{
        private Node pre;
        private Node next;
        private int key,val;
        public Node(int k,int v){
            key=k;val=v;
        }
    }
    private int capacity,len;
    private HashMap<Integer,Node> map=new HashMap<Integer,Node>();//!!! need to initialize!
    private Node head,end;
    public LRUCache(int c){
        capacity=c;
    }
    
    public int get(int key){
        if(!map.containsKey(key))return -1;
        Node n=map.get(key);
        remove(n);
        return sethead(n);
    }
    public void set(int key,int value){
        if(!map.containsKey(key)){
               while(len>=capacity)remove(end);
               Node n=new Node(key,value); 
           sethead(n);
        }else{
            remove(map.get(key));
            Node n=new Node(key,value);
            sethead(n);
        }
    }
    private void remove (Node n){
        if(n==null)return;
        len--;
        Node pre=n.pre,post=n.next;
        if (pre != null) pre.next = post;//be careful about null!!!
		else head = post;
		if (post != null) 	post.pre = pre;
		else 	end = pre;
        map.remove(n.key);
    }
    private int sethead(Node n){
        len++;
        n.pre=null;
        n.next=head;
        if(head!=null)head.pre=n;// must check nead is not null!!!
        head=n;
        if(end==null)end=n;//must check end!!!
        map.put(n.key,n);
    return n.val;}
    }
