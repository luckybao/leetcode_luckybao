Next Permutation Total Accepted: 13510 Total Submissions: 53117 My Submissions
Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).

The replacement must be in-place, do not allocate extra memory.

Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1

public class Solution {//check from backward, find the last increasing sequence from back to beginning
//LOGIC: Find the longest descending tail of the array and reverse them into ascending order.
//If there is any number ahead of the descending tail, it should be replace with the first greater number in the tail.
    /* O(1) -- swap the two elements in the array, given the indexes */  
 private void swap(int[] num, int a, int b) {  
   int temp = num[a];  
   num[a] = num[b];  
   num[b] = temp;  
 }  
 /* O(n) -- reverse the array, given a range */  
 private void reverse(int[] num, int l, int r) {  
   while (l < r)  swap(num, l++, r--);  
 }  
 /* O(n) -- find the next permutation */  
 public void nextPermutation(int[] num) {  
   // find longest descending tail
   int cur = num.length - 1;  
   while (cur > 0 && num[cur-1] >= num[cur]) --cur;  
   reverse(num, cur, num.length-1);  
   if (cur > 0) {  
     // insert cur-1 to the right spot  
     int next = cur;  
     cur -= 1;  
     while (num[next] <= num[cur]) ++next;  
     swap(num, next, cur);  
   }  
 }
}

Python 3:
#The logic is very smart: http://www.cnblogs.com/zuoyuan/p/3780167.html
class Solution:
    def nextPermutation(self, nums):
        """
        :type nums: List[int]
        :rtype: void Do not return anything, modify nums in-place instead.
        """
        partition = -1
        l = len(nums)
        for i in range(l-2, -1, -1):
            if nums[i+1] > nums[i]:
                partition = i
                break
        if partition == -1 : 
            nums.reverse()
            return
        for i in range(l-1, partition, -1):
            if nums[i] > nums[partition]:
                nums[i], nums[partition] = nums[partition] , nums[i]
                break
        nums[partition+1:l] = nums[partition+1:l][::-1]
        
        
