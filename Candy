Candy Total Accepted: 14960 Total Submissions: 80131 My Submissions
There are N children standing in a line. Each child is assigned a rating value.

You are giving candies to these children subjected to the following requirements:

Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.
What is the minimum candies you must give?

//two solutions
public class Solution {
    public int candy(int[] ratings) {//linear space and linear time(two passes, one from front, one from back, calculate along the way)
        int give=1;
        if(ratings.length==0)return 0;
        int[] candy=new int[ratings.length];
        candy[0]=1;
        for(int i=1;i<ratings.length;i++){
           if(ratings[i]>ratings[i-1])candy[i]=candy[i-1]+1;
           else  candy[i]=1;
        }
        int res=candy[candy.length-1];
        for(int i=ratings.length-2;i>=0;i--){
            if(ratings[i]>ratings[i+1])candy[i]=Math.max(candy[i+1]+1,candy[i]);
            res+=candy[i];
        }
    return res;}
}
public class Solution {//https://oj.leetcode.com/discuss/2525/is-there-a-solution-with-o-n-time-and-o-1-space
    public int candy(int[] ratings) {//constant space(one pass) and linear time
        if (ratings.length==0) return 0;
        int n = ratings.length;
        int min_candies = n;
        int starta=0,startb=0,rangea=0,rangeb=0;
        for (int i = 0; i < n - 1; ) {
            while (i<n-1){if(ratings[i] == ratings[i+1]) ++i;else break;}
            starta = i;
            while ( i < n-1) {if(ratings[i] < ratings[i+1])++i;else break;}
            rangea = i - starta+1;
            min_candies += (rangea * (rangea - 1))>>1;// calculate the sum, >>1 means "/2"
            if (i == n-1) break;
            startb = i;
            while (i < n-1) {if(ratings[i] > ratings[i+1])++i;else break;}
                rangeb =i-startb;// since i in last loop might been calculated, it is not i-startb+1, we will remedy in next to next line
            min_candies += (rangeb * (rangeb - 1))>>1;
            if (rangeb >= rangea) min_candies += (rangeb - rangea+1);//remedy here, very important!!!
        }
        return min_candies;}
}
