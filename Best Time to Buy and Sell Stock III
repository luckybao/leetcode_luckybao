Best Time to Buy and Sell Stock III Total Accepted: 11973 Total Submissions: 54087 My Submissions
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most two transactions.

Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

public class Solution {
    public int maxProfit(int[] prices) {//one transaction go from forward and the other go from backward
        if (prices == null || prices.length <= 1)  return 0;
        int[] left = new int[prices.length];
        // DP from left to right;
        left[0] = 0;
        int min = prices[0];//first buy
        for (int i = 1; i < prices.length; i++) {
            if(prices[i]<min)min=prices[i];
            left[i] = Math.max(left[i - 1], prices[i] - min);
        }
        //DP from right to left;
        int right=0,profit = 0;
        int max = prices[prices.length - 1];//second sell
        for (int i = prices.length - 2; i >= 0; i--) {
            if(prices[i]>max)max=prices[i];
            else right = Math.max(right, max - prices[i]);
            profit = Math.max(left[i] + right, profit);
        }
        return profit;}
}
