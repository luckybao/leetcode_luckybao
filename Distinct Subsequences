Distinct Subsequences Total Accepted: 13240 Total Submissions: 53643 My Submissions
Given a string S and a string T, count the number of distinct subsequences of T in S.

A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not).

Here is an example:
S = "rabbbit", T = "rabbit"

Return 3.


public class Solution {//use DP, not very easy to understand, may need to recite
//solution one, with O[M][N] SPACE
    public int numDistinct(String S, String T) {
        if(S.length()==0||T.length()==0||S.length()<T.length())return 0;
        if(S.length()==T.length()){if(S.equals(T))return 1;else return 0;}
        int[][] dp=new int[T.length()][S.length()];
        if(T.charAt(0)==S.charAt(0))dp[0][0]=1;
        for(int j=1;j<S.length();j++){
            dp[0][j]=dp[0][j-1];
        if(S.charAt(j)==T.charAt(0)){dp[0][j]+=1;}   
        }
        for(int i=1;i<T.length();i++){
            dp[i][0]=0;
            for(int j=1;j<S.length();j++){
                dp[i][j]=dp[i][j-1];
              if(S.charAt(j)==T.charAt(i))
              dp[i][j]+=dp[i-1][j-1];  
            }
        }
    return dp[T.length()-1][S.length()-1];}
}

//solution two, one d array
public class Solution {//use DP, not very easy to understand, may need to recite
//solution three, with O[N] SPACE, calcultate from backward !!!
    public int numDistinct(String S, String T) {
         int si = S.length(), ti = T.length();   
   if (si<=0 || ti<=0 || si<ti) return 0;   
   int[] recurs = new int[ti];   
   for (int i=0; i<si; i++) {   
     for (int j=ti-1; j>=0; j--) {   
       if (S.charAt(i)==T.charAt(j)) { 
           if(j==0)recurs[j]+=1;// cannot put in the middle circle!!! since it is updated from backward!!!
           else recurs[j] +=recurs[j-1];   
       }   
     }   
   }   
   return recurs[ti-1];  }
}
