Given n items with size A[i], an integer m denotes the size of a backpack. How full you can fill this backpack? 

Note
You can not divide any item into small pieces.

Example
If we have 4 items with size [2, 3, 5, 7], the backpack size is 11, we can select 2, 3 and 5, so that the max size we can fill this backpack is 10. If the backpack size is 12. we can select [2, 3, 7] so that we can fulfill the backpack.

You function should return the max size we can fill in the given backpack.
//classic bounded knapsack change weight==value
//2D
public class Solution {
    /**
     * @param m: An integer m denotes the size of a backpack
     * @param A: Given n items with size A[i]
     */
    public int backPack(int m, ArrayList<Integer> A) {
        // write your code here
        if (m <= 0 || A == null || A.size() == 0) {
            return 0;
        }
        int[][] dp = new int[A.size()+1][m + 1];
       for(int i=1;i<=A.size();i++){
           for(int j=1;j<=m;j++){
               dp[i][j]=dp[i-1][j];
               if(j-A.get(i-1)>=0){
                   dp[i][j]=Math.max(dp[i-1][j],dp[i-1][j-A.get(i-1)]+A.get(i-1));
               }
           }
       }
        return dp[A.size()][m];
    }
}

//1D
public int backPack(int m, ArrayList<Integer> A) {
        // write your code here
        if (m <= 0 || A == null || A.size() == 0) {
            return 0;
        }
        int[] dp = new int[m + 1];
        dp[0]=0;
        for (int i = 1; i <= A.size(); i++) {
            for (int j = m; j >= 0; j--) {//!!!from backward!!! or use 2 lines O(2n)=O(n) to record!!!
                
                if ( j - A.get(i - 1)>=0) {
                    dp[j] = Math.max(dp[j], dp[j - A.get(i - 1)] + A.get(i - 1));
                }
            }
        }
        return dp[m];
    }
    
    //psuedo
    int dp[2][MAXW];
int solve()
{
    memset(dp[0], 0, sizeof(dp[0]));
    for(int i = 1; i <= N; i++) {
        int *cur = dp[i&1], *prev = dp[!(i&1)];
        for(int j = 0; j <= W; j++) {
            cur[j] = (w[i] > j) ? prev[j] : max(prev[j], prev[j-w[i]] + v[i]);
        }
    }
    return dp[N&1][W];
}  
