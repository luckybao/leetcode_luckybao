Subsets Total Accepted: 19404 Total Submissions: 69691 My Submissions
Given a set of distinct integers, S, return all possible subsets.

Note:
Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.
For example,
If S = [1,2,3], a solution is:

[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]

//logic, add all subsets!!!!!
//solution one, recursive
public class Solution {
    public List<List<Integer>> subsets(int[] S) {//iterative
        List<List<Integer>> results=new ArrayList<List<Integer>>();
        List<Integer> subresult=new ArrayList<Integer>();
        // sort the given set  
   Arrays.sort(S);  
return build(results,S,subresult,0);
 }  
 private List<List<Integer>> build(List<List<Integer>> results,int[] S,List<Integer> subresult, int index){
          results.add(subresult);
     for (int i=index;i<S.length;i++) { 
          List<Integer> list = new ArrayList<Integer>(subresult);
     list.add(S[i]);
      build(results,S,list,i+1);
     }
     
 return results;}
}

//solution two, iterative
public class Solution {
    public List<List<Integer>> subsets(int[] S) {//iterative
        List<List<Integer>> results=new ArrayList<List<Integer>>();
        List<Integer> subresult=new ArrayList<Integer>();
        // sort the given set  
   Arrays.sort(S);  
   // generate subsets  
   results.add(subresult);  
   for (int i=0; i<S.length; ++i) {  
     int curSize = results.size();  
     while (curSize-- > 0) {  
       ArrayList<Integer> res = new ArrayList<Integer>(results.get(curSize));  
       res.add(S[i]);  
       results.add(res);  
     }  
   }  
   return results;  
 }  
}
