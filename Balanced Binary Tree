Balanced Binary Tree Total Accepted: 15306 Total Submissions: 47716 My Submissions
Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 /**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
//Time: O(n), space O(log(n)), make sure to return int not boolean, or it will be O(n^2) time
public class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root==null)return true;
        if(Height(root)==-1)return false;
        return true;
    }
    private int Height (TreeNode root){
        if(root==null)return 0;
        int l=Height(root.left);
        int r=Height(root.right);
        if(l==-1||r==-1||Math.abs(l-r)>1)return -1;// make sure to check all cases!!!
        return Math.max(l,r)+1;
    }
}
 //recursion
public class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root==null) return true;
        if((Math.abs(height(root.left)-height(root.right))<=1)&&(isBalanced(root.left))&&(isBalanced(root.right)))
        return true;
    else return false; }
    public int height(TreeNode node){
        if(node==null) return 0;
        return Math.max(height(node.left),height(node.right))+1;
        
    }
}
