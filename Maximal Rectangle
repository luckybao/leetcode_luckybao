Maximal Rectangle Total Accepted: 9533 Total Submissions: 43876 My Submissions
Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing all ones and return its area.

public class Solution {//like maximal area in histogram
//time O(n*m), space O(matrix[0].length), maintain a row table to record how many '1's in the corresponding column:
//row[j]=matrix[i][j]=='0'?0:1+row[j];
//calculate max for each row
    public class Solution {
    public int maximalRectangle(char[][] matrix) {
        if(matrix.length==0)return 0;
        int[] sub=new int[matrix[0].length];
        for(int col=0;col<matrix[0].length;col++){sub[col]=matrix[0][col]=='0'?0:1;}
        int res=subhelper(sub);
        for(int row=1;row<matrix.length;row++){
            for(int col=0;col<matrix[0].length;col++){
                sub[col]=matrix[row][col]=='0'?0:sub[col]+1;
            }
            res=Math.max(subhelper(sub),res);
        }
    return res;}
    private int subhelper(int [] sub){
        int res=0;
        Stack<Integer> stack=new Stack<>();
        for(int i=0;i<=sub.length;i++){
            int cur=i==sub.length?0:sub[i];
            while(!stack.isEmpty()&&sub[stack.peek()]>=cur){
                int top=stack.pop();
                res=Math.max(res,sub[top]*(stack.isEmpty()?i:i-stack.peek()-1));
            }
            stack.push(i);
        }
    return res;}
}
