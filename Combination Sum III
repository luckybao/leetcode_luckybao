Combination Sum III Total Accepted: 6710 Total Submissions: 23809 My Submissions Question Solution 
Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

Ensure that numbers within the set are sorted in ascending order.


Example 1:

Input: k = 3, n = 7

Output:

[[1,2,4]]

Example 2:

Input: k = 3, n = 9

Output:

[[1,2,6], [1,3,5], [2,3,4]]

public class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
    List<Integer> list = new ArrayList<Integer>();
    if(k==0||n<=0)return result;
    return dfs(result, 1, n, list, k);
}
 
public List<List<Integer>> dfs(List<List<Integer>> result, int start, int sum, List<Integer> list, int k){
    if(sum<0||list.size()>k) return result;
    if(sum==0 && list.size()==k){
        List<Integer> temp = new ArrayList<Integer>(list);
        result.add(temp);
        return result;
    }
 
    for(int i=start; i<=9; i++){
        list.add(i);
        dfs(result, i+1, sum-i, list, k);
        list.remove(list.size()-1);
    }
return result;}
}

Python3:
class Solution:
    def DFS(self, k, n, Baselist, start, temp):
        if (n <  0) or k <0 : return temp
        if (n==0) and k ==0: Solution.res.append(temp)
        for i in range(start, len(Baselist)):
            if(n < Baselist[i]): return temp
            self.DFS(k-1, n-Baselist[i], Baselist, i+1, temp+[Baselist[i]])
        
    def combinationSum3(self, k, n):
        """
        :type k: int
        :type n: int
        :rtype: List[List[int]]
        """
        Baselist =  list(range(1, 10)) 
        Solution.res=[]
        self.DFS(k, n, Baselist, 0, [])
        return Solution.res
