Reverse Nodes in k-Group Total Accepted: 12598 Total Submissions: 50722 My Submissions
Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

You may not alter the values in the nodes, only nodes itself may be changed.

Only constant memory is allowed.

For example,
Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
       if(head==null||head.next==null||k<=1)return head;
       int count=0;
       ListNode dummy=new ListNode(0);
       dummy.next=head;
      ListNode cur=dummy,pre=dummy;
      while(cur!=null){
          count++;
          cur=cur.next;
          if(count<k||cur==null)continue;
          else{
              pre=reverse(pre,cur);
              count=0;
              cur=pre;
          }
      }
    return dummy.next;}
    private ListNode reverse(ListNode start,ListNode end){
        ListNode cur=start.next;
        ListNode stop=end.next;
        while(cur!=null&&cur.next!=null&&cur.next!=stop){// attention stop criteria!!!
            ListNode temp=cur.next;
            cur.next=temp.next;
            temp.next=start.next;
            start.next=temp;
            if(cur.next==null||cur.next==stop)return cur;
        }
    return cur;}
}
//another solution
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if(head==null||k<=1)return head;
        int counter=1;
        ListNode dummy=new ListNode(0);
        dummy.next=head;
        ListNode pre=dummy,last=pre.next,cur=pre.next.next;
        while(cur!=null){
        while(counter<k&&cur!=null){
            cur=cur.next;counter++;
        }
        if(counter<k)return dummy.next;
        cur=last.next;
        while(counter>1){
        last=reverse(pre,last,cur);
        cur=last.next;
            counter--;
        }
            pre=last;
            if(pre!=null)last=pre.next;
            if(last!=null)cur=last.next;
        }
    return dummy.next;}
    private ListNode reverse(ListNode pre, ListNode last, ListNode cur){
        last.next=cur.next;
        cur.next=pre.next;
        pre.next=cur;
        return last;
    }
}

Python 3:
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def swapK(self, start, end):
        dummy = ListNode(0)
        dummy.next = start
        while dummy.next!= end:
            temp = start.next
            start.next = temp.next
            temp.next = dummy.next
            dummy.next = temp
        return [start, end]
    
    def reverseKGroup(self, head, k):
        if head == None or k <=1 : return head
        dummy = ListNode(0)
        dummy.next = head
        cur = dummy
        while cur.next:
            end = cur
            for i in range(k-1):
                end = end.next
                if end.next == None : return dummy.next
            res = self.swapK(cur.next, end.next)         
            cur.next = res[1] ### First assign cur.next or it will end up infinite loop
            cur = res[0]
        return dummy.next
        
