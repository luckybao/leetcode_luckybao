Shortest Palindrome Total Accepted: 4465 Total Submissions: 27106 My Submissions Question Solution 
Given a string S, you are allowed to convert it to a palindrome by adding characters in front of it. Find and return the shortest palindrome you can find by performing this transformation.

For example:

Given "aacecaaa", return "aaacecaaa".

Given "abcd", return "dcbabcd".
//solution one
public class Solution {
	public String shortestPalindrome(String s) {
    int len=s.length();
    //if(s.length()==0)return s;
    int maxlen=0;
      String r=new StringBuffer(s).reverse().toString();
      String t=r+s;
      for(int i=0;i<len;i++){
          if(s.startsWith(r.substring(i)))return t.substring(0,i)+s;
      }
return t;}
}

//solution two, manchester algorithm, very tricky
public class Solution {
	public String shortestPalindrome(String s) {
    int len=s.length();
    //if(s.length()==0)return s;
    int maxlen=0;
       int[] P=new int[len*2+3];
       char[] c=new char[len*2+3];
       for(int i=0;i<len;i++){
           c[i*2+2]=s.charAt(i);
           c[i*2+1]='#';
       }
       c[0]='%';c[len*2+1]='#';c[len*2+2]='&';//pad end
       int right=0,center=0;
       for(int i=1;i<c.length-1;i++){//attention here!i=1,right=0
       int mirror=2*center-i;
           if(i<right)P[i]=Math.min(right-i,P[mirror]);//based on giant shoulder, do not to calculate if i<right
           else P[i]=1;
           //while(c[i+(P[i]+1)]==c[i-(P[i]+1)])P[i]++;
           while(c[i+(P[i])]==c[i-(P[i])])P[i]++;
           if(i+P[i]>right){//change center
               right=i+P[i];
               center=i;
               if(i==P[i])maxlen=right;
           }
       }
        maxlen = maxlen / 2-1;
                StringBuffer sb = new StringBuffer();
                for (int i = len - 1; i >= maxlen; i--) {
                        sb.append(s.charAt(i));
                }
                sb.append(s);
                return sb.toString();
}
}
