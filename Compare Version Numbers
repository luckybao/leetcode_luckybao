Compare Version Numbers Total Accepted: 15916 Total Submissions: 106429 My Submissions Question Solution 
Compare two version numbers version1 and version2.
If version1 > version2 return 1, if version1 < version2 return -1, otherwise return 0.

You may assume that the version strings are non-empty and contain only digits and the . character.
The . character does not represent a decimal point and is used to separate number sequences.
For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level revision of the second first-level revision.

Here is an example of version numbers ordering:

0.1 < 1.1 < 1.2 < 13.37

public class Solution {
    public int compareVersion(String version1, String version2) {//solution2, do not need auxiliary "long", compare char by char
        if(version1.equals(version2))return 0;
        
        int start1=0,end1=0,start2=0,end2=0,c=0;
        while(start1<version1.length()||start2<version2.length()){
            while(start1<version1.length()&&version1.charAt(start1)=='0'){start1++;}
            end1=start1;
            while(end1<version1.length()&&version1.charAt(end1)!='.'){end1++;}
             while(start2<version2.length()&&version2.charAt(start2)=='0'){start2++;}
            end2=start2;
            while(end2<version2.length()&&version2.charAt(end2)!='.'){end2++;}
            c=compare(version1,version2,start1,end1,start2,end2);
            if(c!=0)return c;
            end1++;
                end2++;
                start1 = end1;
                start2 = end2;
        }
        
    return c;}
    public int compare(String version1,String version2,int start1,int end1,int start2,int end2){
        int len1=end1-start1,len2=end2-start2;
        if(len1>len2)return 1;
        else if(len1<len2)return -1;
        for(int i=0; i<end1-start1; i++){
                            if(version1.charAt(start1+i) > version2.charAt(start2+i)){//must use i!!! do not replace start1 or start2
                                    return 1;
                            }
                            else if (version1.charAt(start1+i) < version2.charAt(start2+i)){
                                    return -1;
                            }
                    }
    return 0;}
}

public class Solution {
    public int compareVersion(String version1, String version2) {//solution1, need auxiliary "long" a, b to store the value
        if(version1.equals(version2))return 0;
        long a=0,b=0;
        int i=0,j=0;
        while(i<version1.length()||j<version2.length()){
            a=0;b=0;
            while(i<version1.length()&&version1.charAt(i)!='.'){
                a=a*10+version1.charAt(i)-'0';
                i++;
            }
            i++;
            while(j<version2.length()&&version2.charAt(j)!='.'){
                b=b*10+version2.charAt(j)-'0';
                j++;
            }
            j++;
            if(a<b)return -1;
            else if(a>b)return 1;
        }
    return 0;}
}
