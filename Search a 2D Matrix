Search a 2D Matrix Total Accepted: 15602 Total Submissions: 50227 My Submissions
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
For example,

Consider the following matrix:

[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
Given target = 3, return true.

public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {//this solution is much cleaner
        // treat the 2D matrix as a sorted 1D array and use binary search to find the target  
   int low = 0, high = matrix.length * matrix[0].length - 1;  
   while (low <= high) {  
     int mid = (low + high) / 2;  
     int row = mid / matrix[0].length, col = mid % matrix[0].length;  
     if (target == matrix[row][col]) return true;  
     else if (target < matrix[row][col]) high = mid - 1;  
     else low = mid + 1;  
   }  
   
   return false;  
 }
}
