Decode Ways Total Accepted: 12733 Total Submissions: 80158 My Submissions
A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given an encoded message containing digits, determine the total number of ways to decode it.

For example,
Given encoded message "12", it could be decoded as "AB" (1 2) or "L" (12).

The number of ways decoding "12" is 2.

public class Solution {//dp table t[]
    //case 1: s.chatAt(i-1)=='0',t[i]=t[i-2]
    //case 2: (s.charAt(i-1)=='1'&&s.charAt(1)!='0') || (s.charAt(i-1)=='2'&&s.charAt(i)<='6'&&s.charAt(i)>='1'),t[i]=t[i-1]+t[i-2]
    //case 3: else t[i]=t[i-1]
    //special case: continuous 0 and s.charAt(i-1)>=3 && s.charAt(i)=='0' invalid!!!
    public int numDecodings(String s) {// there are three cases, be aware of 0!
        if(s.length()==0)return 0;
        if(s.charAt(0)=='0')return 0;
        int[] dp=new int[3];//we just need O(1) space
        if(s.charAt(0)<='9'&&s.charAt(0)>='1')
        dp[0]=1;
        if(s.length()==1)return dp[0];
        if((s.charAt(0)=='1'&&s.charAt(1)!='0')||(s.charAt(0)=='2'&&s.charAt(1)<='6'&&s.charAt(1)>='1'))dp[1]=2;
        else if(s.charAt(1)=='0'&&s.charAt(0)>='3')return 0;
        else dp[1]=1;
        if(s.length()==2)return dp[1];//initialize the first two value
        //int cur=2;
        for(int i=2;i<s.length();i++){
            if(s.charAt(i-1)=='0'&&s.charAt(i)=='0') return 0;//skip continuous '0'
            if(s.charAt(i-1)=='0'||((s.charAt(i-1)=='1'||s.charAt(i-1)=='2')&&s.charAt(i)=='0')) dp[2]=dp[0];
            else if(s.charAt(i-1)>='3'&&s.charAt(i)=='0') return 0;
            else if((s.charAt(i-1)=='1'&&s.charAt(i)!='0')||(s.charAt(i-1)=='2'&&s.charAt(i)<='6'&&s.charAt(i)>='1')) 
            dp[2]=dp[1]+dp[0];
            else dp[2]=dp[1];
            dp[0]=dp[1];
            dp[1]=dp[2];
        }
    return dp[2];}
}
