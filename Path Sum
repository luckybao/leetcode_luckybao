Path Sum Total Accepted: 19607 Total Submissions: 64180 My Submissions
Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \      \
        7    2      1
return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {//DFS
    public boolean hasPathSum(TreeNode root, int sum) {
      if(root==null)return false;
      Stack<TreeNode> stack=new Stack<>();
      Stack<Integer> stacksum=new Stack<>();
      stack.push(root);
      stacksum.push(root.val);
      TreeNode top;
      int topsum;
        while(!stack.isEmpty()){
            top=stack.pop();
            topsum=stacksum.pop();
            if(top.left==null&&top.right==null&&topsum==sum)return true;
            if(top.right!=null){
                stack.push(top.right);
                stacksum.push(topsum+top.right.val);
            }
            if(top.left!=null){
                stack.push(top.left);
                stacksum.push(topsum+top.left.val);
            }
        }
    return false;}
}
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {//BFS
    public boolean hasPathSum(TreeNode root, int sum) {
      if(root==null)return false;
      Queue<TreeNode> queue=new LinkedList<>();
      Queue<Integer> queuesum=new LinkedList<>();
      queue.offer(root);
      queuesum.offer(root.val);
        while(!queue.isEmpty()){
          TreeNode top=queue.poll();
          Integer topsum=queuesum.poll();
          if(top.left==null&&top.right==null&&topsum==sum)return true;
          if(top.left!=null){queue.offer(top.left);queuesum.offer(top.left.val+topsum);}
          if(top.right!=null){queue.offer(top.right);queuesum.offer(top.right.val+topsum);}
        }
    return false;}
}
//recursive
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if(root==null)return false;
        if(root.left==null&&root.right==null){
            if(root.val==sum)return true;
            else return false;
        }
    return hasPathSum(root.left,sum-root.val)||hasPathSum(root.right,sum-root.val);}
}
