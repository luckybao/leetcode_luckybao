House Robber II Total Accepted: 5822 Total Submissions: 22032 My Submissions Question Solution 
Note: This is an extension of House Robber.

After robbing those houses on that street, the thief has found himself a new place for his thievery so that he will not get too much attention. This time, all houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, the security system for these houses remain the same as for those in the previous street.

Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.

//solution II
public class Solution {
    public int rob(int[] nums) {
        int len=nums.length,res=0;
        if(len==0)return 0;
        if(len==1)return nums[0];
        if(len==2)return Math.max(nums[0],nums[1]);
        int a=0,b=nums[0];
        for(int i=2;i<len;i++){
            int temp=Math.max(b,a+nums[i-1]);
            a=b;b=temp;
        }
        int c=0,d=nums[1];
         for(int i=2;i<len;i++){
            int temp=Math.max(d,c+nums[i]);
            c=d;d=temp;
        }
    return Math.max(b,d);}
}

//solution one
public class Solution {//go over two times, one not includd the first, one not include the last
    public int rob(int[] nums) {
        int len=nums.length,res=0;
        if(len==0)return 0;
        if(len==1)return nums[0];
        if(len==2)return Math.max(nums[0],nums[1]);
        int[] dp=new int[len];
        dp[0]=0;
        dp[1]=nums[0];
        for(int i=2;i<len;i++){
            dp[i]=Math.max(dp[i-1],dp[i-2]+nums[i-1]);
        }
        int[] dp2=new int[len];
        dp2[0]=0;
        dp2[1]=nums[1];
         for(int i=2;i<len;i++){
            dp2[i]=Math.max(dp2[i-1],dp2[i-2]+nums[i]);
        }
    return Math.max(dp[len-1],dp2[len-1]);}
}
