Remove Duplicates from Sorted List II Total Accepted: 16688 Total Submissions: 67311 My Submissions
Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.

For example,
Given 1->2->3->3->4->4->5, return 1->2->5.
Given 1->1->1->2->3, return 2->3.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
 //solution one, cur is the pointer in original list, it is a helper, pre is he new list's pointer
public class Solution {
    public ListNode deleteDuplicates(ListNode head) {//logic!!!
        if(head==null||head.next==null)return head;
        ListNode dummy=new ListNode(0);
        dummy.next=head;
        ListNode pre=dummy,cur;
        while(pre!=null&&pre.next!=null){
            cur=pre.next;
            if(cur!=null&&cur.next!=null){
                if(cur.val==cur.next.val){//must first enter the loop, then use "while" to get multiple duplicate out
                while(cur.next!=null&&cur.val==cur.next.val){cur=cur.next;}
                   pre.next=cur.next; 
                }
                 else{pre=cur;}
            }
            else break;
        }
    return dummy.next;}
}

//solution two, logic: pre is always the pointer of original list, points to the prior node of next need to examine, cur is the pointer of new list
public class Solution {
    public ListNode deleteDuplicates(ListNode head) {//logic!!!
        if(head==null||head.next==null)return head;
        ListNode dummy=new ListNode(0);
        dummy.next=head;
        ListNode pre=dummy,cur=dummy;
        while(pre!=null&&pre.next!=null){
            if(pre.next.next==null||pre.next.val!=pre.next.next.val){cur.next=pre.next;cur=cur.next;pre=pre.next;}
            else{
              while(pre.next!=null&&pre.next.next!=null&&pre.next.next.val==pre.next.val)pre=pre.next;
              pre=pre.next;
            }
            if(pre.next==null){cur.next=null;break;}
        }
    return dummy.next;}
}
