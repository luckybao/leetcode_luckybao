Scramble String Total Accepted: 11081 Total Submissions: 49140 My Submissions
Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.

Below is one possible representation of s1 = "great":

    great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t
To scramble the string, we may choose any non-leaf node and swap its two children.

For example, if we choose the node "gr" and swap its two children, it produces a scrambled string "rgeat".

    rgeat
   /    \
  rg    eat
 / \    /  \
r   g  e   at
           / \
          a   t
We say that "rgeat" is a scrambled string of "great".

Similarly, if we continue to swap the children of nodes "eat" and "at", it produces a scrambled string "rgtae".

    rgtae
   /    \
  rg    tae
 / \    /  \
r   g  ta  e
       / \
      t   a
We say that "rgtae" is a scrambled string of "great".

Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.

public class Solution {//
// logic: String s2 is a scrambled string of string s2, if and only if
// They are of the same length (say n );
// If n=1 , s1 is the same as s2;
// Otherwise, there exists an l ( o<l<n ) such that at least one of the following conditions hold:
// s1[0...l-1] is a scrambled string of s2[0...l-1], and s1[l...n-1] is a scrambled string of s2[l...n-1];
// s1[0...l-1] is a scrambled string of s2[n-l...n-1], and s1[l...n-1] is a scrambled string of s2[0...n-l-1].
    public boolean isScramble(String s1, String s2) {
       if(s1.length()!=s2.length())return false;
       boolean[][][] dp=new boolean[s1.length()][s1.length()][s1.length()];//dp[i][j][k] is true means s1.substring(i,i+k+1) and s2.substring(j,j+k+1) is a match
       for(int i=0;i<s1.length();i++){
           for(int j=0;j<s2.length();j++){
               if(s1.charAt(i)==s2.charAt(j))dp[i][j][0]=true;
           }
       }
       for (int k=1; k < s1.length(); ++k) { // k: length  
     for (int i=0; i < s1.length() - k; ++i) { // i: index in s1  
       for (int j=0; j < s1.length() - k; ++j) { // j: index in s2  
         //dp[i][j][k] = false;  
         for (int p=0; p < k; ++p) { // p: split into [0..p] and [p+1..k]  
           if ((dp[i][j][p] && dp[i+p+1][j+p+1][k-p-1])|| (dp[i][j+k-p][p] && dp[i+p+1][j][k-p-1])) {  
             dp[i][j][k] = true;  
             break;  
           }  
         }  
       }  
     }  
   }  
    return dp[0][0][s1.length()-1];}
}

public class Solution {//
// Recursion method, exponential but trim lots of unnecessary recursion, reference from others

   public boolean isScramble(String s1, String s2) {
       if( s1.length() != s2.length() ){
           return false;
       }
      
       if( s1.length() == 0 || s1.equals(s2)) {
           return true;
       }
      
       if(! sorted_sequence(s1).equals(sorted_sequence(s2)))  // this could trim lots of uncessary recursion
           return false;
      
       for(int i = 1; i <= s1.length() - 1; i++) {
           String s11 = s1.substring(0, i);
           String s12 = s1.substring(i);
           String s21 = s2.substring(0, i);
           String s22 = s2.substring(i);
           String s31 = s2.substring(0, s2.length()-i);
           String s32 = s2.substring(s2.length() - i);

           if( (isScramble(s11, s21) && isScramble(s12, s22)) ||
               (isScramble(s11, s32) && isScramble(s12, s31)) ) {
               return true;
           }
       }
       return false;
   }
  
   private String sorted_sequence(String s){
       char[] arr = s.toCharArray();
       Arrays.sort(arr);
       return new String(arr);
   }
}
