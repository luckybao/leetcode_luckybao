Simplify Path Total Accepted: 9878 Total Submissions: 49648 My Submissions
Given an absolute path for a file (Unix-style), simplify it.

For example,
path = "/home/", => "/home"
path = "/a/./b/../../c/", => "/c"
click to show corner cases.

Corner Cases:
Did you consider the case where path = "/../"?
In this case, you should return "/".
Another corner case is the path might contain multiple slashes '/' together, such as "/home//foo/".
In this case, you should ignore redundant slashes and return "/home/foo".

//learn split method
public class Solution {
//An absolute path always starts from the root directory, i.e. "/".
// "." represents the current directory itself.
// ".." goes upwards to the parent directory if exists. E.g. "/a/b/.." == "/a", while "/../" == "/".
// Redundant slashes can be ignored. E.g. "/a///b" == "/a/b"
    public String simplifyPath(String path) {
        StringBuilder result = new StringBuilder();
        String[] stubs = path.split("[/]+");// split method:, "+" means one or more continuous "/" will be treated, things in the backet can contain multiple signs as splitter
        Stack<String> paths = new Stack<String>();
        for (String s : stubs){
            if(s.equals("..")){
                if(!paths.isEmpty()){
                    paths.pop();
                }
            }
            else if (!s.equals(".") && !s.equals("")){
                paths.push(s);
            }
        }
        while(!paths.isEmpty())
        {String s=paths.pop();
          result.insert(0,s).insert(0,"/");  
        }
        String res=result.toString();
        return res.length()==0?"/":res;}
}
