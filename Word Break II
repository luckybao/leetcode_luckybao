Word Break II Total Accepted: 12576 Total Submissions: 77971 My Submissions
Given a string s and a dictionary of words dict, add spaces in s to construct a sentence where each word is a valid dictionary word.

Return all such possible sentences.

For example, given
s = "catsanddog",
dict = ["cat", "cats", "and", "sand", "dog"].

A solution is ["cats and dog", "cat sand dog"].

public class Solution {
    public List<String> wordBreak(String s, Set<String> dict) {//record parents in arraylist like word ladder II, be careful of recursion in the last subroutine! since we need to update the strings all ready have been recorded, we need to pass this value by StringBuilder!
        List<String> res=new ArrayList<String>();
        if(s.length()==0||dict.size()==0){
            return res;
        }
        ArrayList<ArrayList<Integer>> parents=new ArrayList<ArrayList<Integer>>();
        for(int i=0;i<s.length();i++)parents.add(new ArrayList<Integer>());//parents initialization
        boolean[] table=new boolean[s.length()+1];
        table[0]=true;
        if(find(s,dict,parents,table))//establish parents table
        trace(0,s,new StringBuilder(),parents,res);//trace every results
    return res;}
    public boolean find(String s, Set<String> dict,ArrayList<ArrayList<Integer>> parents,boolean[] table){
        for(int i=0;i<s.length();i++){
            for(int j=i;j>=0;j--){
                table[i+1]=table[i+1]||(table[i-j]&&dict.contains(s.substring(i-j,i+1)));
                if(table[i-j]&&dict.contains(s.substring(i-j,i+1)))parents.get(i-j).add(i+1);
            }
        }
    return table[s.length()];}
    public void trace(int start,String s,StringBuilder solution,ArrayList<ArrayList<Integer>> parents,List<String> res){
       for(Integer end : parents.get(start)){
            StringBuilder newSolution=new StringBuilder(solution);
            if(start==0) newSolution.append(s.substring(start,end));
            else newSolution.append(" ").append(s.substring(start,end));
            		if(end == s.length()) 
            		 res.add(newSolution.toString());
            		 else trace(end,s,newSolution,parents,res);}
    }
}


public class Solution {
    public List<String> wordBreak(String s, Set<String> dict) {//another solution,no need to maintain the table, we just calculate from back till start, the average for establish the record table is still O(n^2), however the  worst ones will be calculated much faster!!!
        //create the word ending character's index list for each character
        int length = s.length();
        ArrayList<ArrayList<Integer>> record = new ArrayList<ArrayList<Integer>>(length);
        for(int i = 0;i<length;i++)
            record.add(new ArrayList<Integer>());
        //each character can be the ending character of some word
        for(int end=length;end>=0;end--){
            if(end < length && record.get(end).isEmpty())continue;
            //break here! why? if record.get(end).isEmpty(), since we calculate from backward and end<length, it means no elements started at position "end" ended at any other positions further of "end". so there will be no valid solution with "end" as an start of a word. We can skip this line which is still right, but TLE  
                
            //find the starting character for the current ending character
            for(int runner = end-1;runner >= 0;runner--){
                if(dict.contains(s.substring(runner,end)))
                    record.get(runner).add(end);    //add current end to start character's list
            }
        }
        List<String> solutionSet = new ArrayList<String>();
        buildSolution(record,0,s,"",solutionSet);
        return solutionSet;
    }
    void buildSolution(ArrayList<ArrayList<Integer>> record, int current, String s, 
                String solution, List<String> solutionSet){
        //iterate on current character's word ending list
        for(Integer end : record.get(current)){
 
            String sub=s.substring(current,end);
            StringBuilder tmp=new StringBuilder(solution);
            if(current==0) tmp.append(sub); else tmp.append(" ").append(sub);
            //String newSolution = solution+(current==0 ? sub : " "+sub);
            String newSolution=tmp.toString();
            if(end == s.length()) 
                solutionSet.add(newSolution);
            else 
                buildSolution(record,end,s,newSolution,solutionSet);
        }
    }
 
}

//another solution, caculate from backward, recursion, no need to maintain table
public class Solution {
    public List<String> wordBreak(String s, Set<String> dict) {// Note: The Solution object is instantiated only once and is reused by each test case.
        Map<String, ArrayList<String>> map = new HashMap<String, ArrayList<String>>();
        return wordBreakHelper(s,dict,map);
    }

    public ArrayList<String> wordBreakHelper(String s, Set<String> dict, Map<String, ArrayList<String>> memo){
        if(memo.containsKey(s)) return memo.get(s);
        ArrayList<String> result = new ArrayList<String>();
        int n = s.length();
        if(n <= 0) return result;
        for(int len = 1; len <= n; ++len){
            String subfix = s.substring(0,len);
            if(dict.contains(subfix)){
                if(len == n){
                    result.add(subfix);
                }else{
                    String prefix = s.substring(len);//means s.substring(len,s.length())
                    ArrayList<String> tmp = wordBreakHelper(prefix, dict, memo);
                    if(tmp==null)return result;
                    for(String item:tmp){
                        StringBuilder string=new StringBuilder(subfix);
                        string.append(" ").append(item);
                        result.add(string.toString());
                    }
                memo.put(s, result);}//this sentence also can be put next,next.next line
           }
        }
        //memo.put(s, result);
        return result;
    }
 
}
